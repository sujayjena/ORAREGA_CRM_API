//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OraRegaAV.DBEntity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbOraRegaEntities : DbContext
    {
        public dbOraRegaEntities()
            : base("name=dbOraRegaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAccessory> tblAccessories { get; set; }
        public virtual DbSet<tblArea> tblAreas { get; set; }
        public virtual DbSet<tblBranch> tblBranches { get; set; }
        public virtual DbSet<tblBranchQueue> tblBranchQueues { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblCity> tblCities { get; set; }
        public virtual DbSet<tblCompanyType> tblCompanyTypes { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblDepartment> tblDepartments { get; set; }
        public virtual DbSet<tblEmpDocument> tblEmpDocuments { get; set; }
        public virtual DbSet<tblEnquiryStatusMaster> tblEnquiryStatusMasters { get; set; }
        public virtual DbSet<tblHSNCodeGSTMapping> tblHSNCodeGSTMappings { get; set; }
        public virtual DbSet<tblIssueDescription> tblIssueDescriptions { get; set; }
        public virtual DbSet<tblLeaveType> tblLeaveTypes { get; set; }
        public virtual DbSet<tblMenuMaster> tblMenuMasters { get; set; }
        public virtual DbSet<tblMenuRoleMapping> tblMenuRoleMappings { get; set; }
        public virtual DbSet<tblOnlineCustomer> tblOnlineCustomers { get; set; }
        public virtual DbSet<tblOperatingSystem> tblOperatingSystems { get; set; }
        public virtual DbSet<tblOrderTypeMaster> tblOrderTypeMasters { get; set; }
        public virtual DbSet<tblPartDescription> tblPartDescriptions { get; set; }
        public virtual DbSet<tblPaymentTerm> tblPaymentTerms { get; set; }
        public virtual DbSet<tblPincode> tblPincodes { get; set; }
        public virtual DbSet<tblPriority> tblPriorities { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<tblProductCondition> tblProductConditions { get; set; }
        public virtual DbSet<tblProductMake> tblProductMakes { get; set; }
        public virtual DbSet<tblProductModel> tblProductModels { get; set; }
        public virtual DbSet<tblProductType> tblProductTypes { get; set; }
        public virtual DbSet<tblQueue> tblQueues { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblRoleHierarchy> tblRoleHierarchies { get; set; }
        public virtual DbSet<tblSalesOrderStatu> tblSalesOrderStatus { get; set; }
        public virtual DbSet<tblSOCustomerComment> tblSOCustomerComments { get; set; }
        public virtual DbSet<tblSOPOAttachment> tblSOPOAttachments { get; set; }
        public virtual DbSet<tblSOProductsMaster> tblSOProductsMasters { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
        public virtual DbSet<tblStock> tblStocks { get; set; }
        public virtual DbSet<tblStockAndPartMapping> tblStockAndPartMappings { get; set; }
        public virtual DbSet<tblStockEntry> tblStockEntries { get; set; }
        public virtual DbSet<tblStockEntryHistory> tblStockEntryHistories { get; set; }
        public virtual DbSet<tblSupportType> tblSupportTypes { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblVendor> tblVendors { get; set; }
        public virtual DbSet<tblWareHouseTransaction> tblWareHouseTransactions { get; set; }
        public virtual DbSet<tblWarrantyType> tblWarrantyTypes { get; set; }
        public virtual DbSet<tblWOAccessory> tblWOAccessories { get; set; }
        public virtual DbSet<tblWOProofOfPurchase> tblWOProofOfPurchases { get; set; }
        public virtual DbSet<tblWORepairRemark> tblWORepairRemarks { get; set; }
        public virtual DbSet<tblWOSnap> tblWOSnaps { get; set; }
        public virtual DbSet<tblStockEntryBulkData> tblStockEntryBulkDatas { get; set; }
        public virtual DbSet<tblLoggedInUser> tblLoggedInUsers { get; set; }
        public virtual DbSet<tblPermanentAddress> tblPermanentAddresses { get; set; }
        public virtual DbSet<tblTemporaryAddress> tblTemporaryAddresses { get; set; }
        public virtual DbSet<tblUserType> tblUserTypes { get; set; }
        public virtual DbSet<tblConfigurationMaster> tblConfigurationMasters { get; set; }
        public virtual DbSet<tblCustomer> tblCustomers { get; set; }
        public virtual DbSet<tblProductIssuesPhoto> tblProductIssuesPhotos { get; set; }
        public virtual DbSet<tblPurchaseProofPhoto> tblPurchaseProofPhotos { get; set; }
        public virtual DbSet<tblSalesOrderEnquiry> tblSalesOrderEnquiries { get; set; }
        public virtual DbSet<tblOrderStatusMaster> tblOrderStatusMasters { get; set; }
        public virtual DbSet<tblExtendedWarranty> tblExtendedWarranties { get; set; }
        public virtual DbSet<tblServiceAddresss> tblServiceAddressses { get; set; }
        public virtual DbSet<tblServiceType> tblServiceTypes { get; set; }
        public virtual DbSet<tblCustomerSellProductsMapping> tblCustomerSellProductsMappings { get; set; }
        public virtual DbSet<tblCustomersSellDetail> tblCustomersSellDetails { get; set; }
        public virtual DbSet<tblProductDetailsPurchaseProof> tblProductDetailsPurchaseProofs { get; set; }
        public virtual DbSet<tblProductDetailsSnap> tblProductDetailsSnaps { get; set; }
        public virtual DbSet<tblConfigContactU> tblConfigContactUs { get; set; }
        public virtual DbSet<tblExtendWarrantyPurchaseProof> tblExtendWarrantyPurchaseProofs { get; set; }
        public virtual DbSet<tblExtendedWarrantyProduct> tblExtendedWarrantyProducts { get; set; }
        public virtual DbSet<tblContactUsEnquiry> tblContactUsEnquiries { get; set; }
        public virtual DbSet<tblContactUsEnquiryPhoto> tblContactUsEnquiryPhotos { get; set; }
        public virtual DbSet<tblAddressTypesMaster> tblAddressTypesMasters { get; set; }
        public virtual DbSet<ModuleMaster> ModuleMasters { get; set; }
        public virtual DbSet<RoleMaster_Employee_Permission> RoleMaster_Employee_Permission { get; set; }
        public virtual DbSet<RoleMaster_Permission> RoleMaster_Permission { get; set; }
        public virtual DbSet<AttendanceHistory> AttendanceHistories { get; set; }
        public virtual DbSet<tblLeaveMaster> tblLeaveMasters { get; set; }
        public virtual DbSet<tblStatusMaster> tblStatusMasters { get; set; }
        public virtual DbSet<tblCareer> tblCareers { get; set; }
        public virtual DbSet<tblStockPartStatu> tblStockPartStatus { get; set; }
        public virtual DbSet<tblDelayType> tblDelayTypes { get; set; }
        public virtual DbSet<tblRepairClassType> tblRepairClassTypes { get; set; }
        public virtual DbSet<tblRescheduleReason> tblRescheduleReasons { get; set; }
        public virtual DbSet<tblTravelRange> tblTravelRanges { get; set; }
        public virtual DbSet<tblGSTMapping> tblGSTMappings { get; set; }
        public virtual DbSet<tblRatePerKM> tblRatePerKMs { get; set; }
        public virtual DbSet<tblProductDescription> tblProductDescriptions { get; set; }
        public virtual DbSet<tblCaseStatu> tblCaseStatus { get; set; }
        public virtual DbSet<tblWorkOrder> tblWorkOrders { get; set; }
        public virtual DbSet<tblBusinessType> tblBusinessTypes { get; set; }
        public virtual DbSet<tblPartDetail> tblPartDetails { get; set; }
        public virtual DbSet<tblWOPart> tblWOParts { get; set; }
        public virtual DbSet<tblWOOTPVerify> tblWOOTPVerifies { get; set; }
        public virtual DbSet<tblRequestForAdvance> tblRequestForAdvances { get; set; }
        public virtual DbSet<tblSOEnquiryProduct> tblSOEnquiryProducts { get; set; }
        public virtual DbSet<tblSalesOrderProduct> tblSalesOrderProducts { get; set; }
        public virtual DbSet<tblSalesOrder> tblSalesOrders { get; set; }
        public virtual DbSet<tblEmployee> tblEmployees { get; set; }
        public virtual DbSet<tblClaimSettlementItemAttachment> tblClaimSettlementItemAttachments { get; set; }
        public virtual DbSet<tblClaimSettlement> tblClaimSettlements { get; set; }
        public virtual DbSet<tblClaimSettlementItem> tblClaimSettlementItems { get; set; }
        public virtual DbSet<tblClaimType> tblClaimTypes { get; set; }
        public virtual DbSet<tblWorkOrderEnquiry> tblWorkOrderEnquiries { get; set; }
        public virtual DbSet<tblPartsAllocatedToEngineer> tblPartsAllocatedToEngineers { get; set; }
        public virtual DbSet<tblPartsAllocatedToWorkOrder> tblPartsAllocatedToWorkOrders { get; set; }
        public virtual DbSet<tblStockTransferStatu> tblStockTransferStatus { get; set; }
        public virtual DbSet<tblStockTransferOut> tblStockTransferOuts { get; set; }
        public virtual DbSet<tblSavedProductDetail> tblSavedProductDetails { get; set; }
        public virtual DbSet<tblWOEnquiryCustomerFeedback> tblWOEnquiryCustomerFeedbacks { get; set; }
        public virtual DbSet<tblPartsAllocatedToReturn> tblPartsAllocatedToReturns { get; set; }
        public virtual DbSet<tblBanner> tblBanners { get; set; }
        public virtual DbSet<tblOfferAd> tblOfferAds { get; set; }
        public virtual DbSet<tblOurProduct> tblOurProducts { get; set; }
        public virtual DbSet<tblOurService> tblOurServices { get; set; }
        public virtual DbSet<tblPaymentPolicy> tblPaymentPolicies { get; set; }
        public virtual DbSet<tblPrivacyAndPolicy> tblPrivacyAndPolicies { get; set; }
        public virtual DbSet<tblRefundAndCancellationPolicy> tblRefundAndCancellationPolicies { get; set; }
        public virtual DbSet<tblTermsAndCondition> tblTermsAndConditions { get; set; }
        public virtual DbSet<tblTestimonial> tblTestimonials { get; set; }
        public virtual DbSet<tblEngineerVisitHistory> tblEngineerVisitHistories { get; set; }
        public virtual DbSet<tblStockTransferPartDetail> tblStockTransferPartDetails { get; set; }
        public virtual DbSet<tblVehicleType> tblVehicleTypes { get; set; }
        public virtual DbSet<tblCareerPost> tblCareerPosts { get; set; }
        public virtual DbSet<tblTravelClaim> tblTravelClaims { get; set; }
        public virtual DbSet<tblStockOut_DAO> tblStockOut_DAO { get; set; }
        public virtual DbSet<tblStockOut_DAO_PartDetails> tblStockOut_DAO_PartDetails { get; set; }
        public virtual DbSet<tblStockOut_Defective> tblStockOut_Defective { get; set; }
        public virtual DbSet<tblStockOut_Defective_PartDetails> tblStockOut_Defective_PartDetails { get; set; }
        public virtual DbSet<tblTrackingOrder> tblTrackingOrders { get; set; }
        public virtual DbSet<tblWorkOrderRescheduleHistory> tblWorkOrderRescheduleHistories { get; set; }
        public virtual DbSet<tblWorkOrderEngineerAllocatedHistory> tblWorkOrderEngineerAllocatedHistories { get; set; }
        public virtual DbSet<tblOTP> tblOTPs { get; set; }
        public virtual DbSet<tblSMSLogHistory> tblSMSLogHistories { get; set; }
        public virtual DbSet<tblQuotationServiceChargeDetail> tblQuotationServiceChargeDetails { get; set; }
        public virtual DbSet<tblInvoiceServiceChargeDetail> tblInvoiceServiceChargeDetails { get; set; }
        public virtual DbSet<OLD_tblWorkOrderEnquiry> OLD_tblWorkOrderEnquiry { get; set; }
        public virtual DbSet<tblQuotationServiceChargeDetailsLog> tblQuotationServiceChargeDetailsLogs { get; set; }
        public virtual DbSet<tblBranchMapping> tblBranchMappings { get; set; }
        public virtual DbSet<tblInvoice> tblInvoices { get; set; }
        public virtual DbSet<tblQuotation> tblQuotations { get; set; }
        public virtual DbSet<tblQuotationLog> tblQuotationLogs { get; set; }
        public virtual DbSet<tblCompany> tblCompanies { get; set; }
        public virtual DbSet<tblWOPartRequest> tblWOPartRequests { get; set; }
        public virtual DbSet<tblNotification> tblNotifications { get; set; }
        public virtual DbSet<tblLogDetail> tblLogDetails { get; set; }
        public virtual DbSet<tblInvoicePartDetail> tblInvoicePartDetails { get; set; }
        public virtual DbSet<tblQuotationPartDetail> tblQuotationPartDetails { get; set; }
        public virtual DbSet<tblQuotationPartDetailsLog> tblQuotationPartDetailsLogs { get; set; }
        public virtual DbSet<tblPaymentPartDetail> tblPaymentPartDetails { get; set; }
        public virtual DbSet<tblPayment> tblPayments { get; set; }
        public virtual DbSet<tblEmailNotification> tblEmailNotifications { get; set; }
    
        public virtual ObjectResult<GetEmployeeListForDropDown_Result> GetEmployeeListForDropDown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeListForDropDown_Result>("GetEmployeeListForDropDown");
        }
    
        public virtual ObjectResult<GetMenuList_Result> GetMenuList(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenuList_Result>("GetMenuList", userIdParameter);
        }
    
        public virtual ObjectResult<GetProductMakesList_Result> GetProductMakesList(string productMake, string productType, string orderTypeCode, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var productMakeParameter = productMake != null ?
                new ObjectParameter("ProductMake", productMake) :
                new ObjectParameter("ProductMake", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var orderTypeCodeParameter = orderTypeCode != null ?
                new ObjectParameter("OrderTypeCode", orderTypeCode) :
                new ObjectParameter("OrderTypeCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductMakesList_Result>("GetProductMakesList", productMakeParameter, productTypeParameter, orderTypeCodeParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetProductModelsList_Result> GetProductModelsList(string productModel, string productMake, string productType, string orderTypeCode, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var productModelParameter = productModel != null ?
                new ObjectParameter("ProductModel", productModel) :
                new ObjectParameter("ProductModel", typeof(string));
    
            var productMakeParameter = productMake != null ?
                new ObjectParameter("ProductMake", productMake) :
                new ObjectParameter("ProductMake", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var orderTypeCodeParameter = orderTypeCode != null ?
                new ObjectParameter("OrderTypeCode", orderTypeCode) :
                new ObjectParameter("OrderTypeCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductModelsList_Result>("GetProductModelsList", productModelParameter, productMakeParameter, productTypeParameter, orderTypeCodeParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetProductTypesList_Result> GetProductTypesList(string productType, string orderTypeCode, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var orderTypeCodeParameter = orderTypeCode != null ?
                new ObjectParameter("OrderTypeCode", orderTypeCode) :
                new ObjectParameter("OrderTypeCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductTypesList_Result>("GetProductTypesList", productTypeParameter, orderTypeCodeParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetStockEntryList_Result> GetStockEntryList(Nullable<int> id, string docketNo, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> vendorId, string uniqueCode, string partName, string partDescription, string partNumber, Nullable<System.DateTime> receivedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var docketNoParameter = docketNo != null ?
                new ObjectParameter("DocketNo", docketNo) :
                new ObjectParameter("DocketNo", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var uniqueCodeParameter = uniqueCode != null ?
                new ObjectParameter("UniqueCode", uniqueCode) :
                new ObjectParameter("UniqueCode", typeof(string));
    
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            var partDescriptionParameter = partDescription != null ?
                new ObjectParameter("PartDescription", partDescription) :
                new ObjectParameter("PartDescription", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockEntryList_Result>("GetStockEntryList", idParameter, docketNoParameter, companyIdParameter, branchIdParameter, vendorIdParameter, uniqueCodeParameter, partNameParameter, partDescriptionParameter, partNumberParameter, receivedDateParameter);
        }
    
        public virtual ObjectResult<GetWOListForDropDown_Result> GetWOListForDropDown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWOListForDropDown_Result>("GetWOListForDropDown");
        }
    
        public virtual ObjectResult<ImportStockEntry_Result> ImportStockEntry(string stockEntryData, Nullable<long> loggedInUserId)
        {
            var stockEntryDataParameter = stockEntryData != null ?
                new ObjectParameter("StockEntryData", stockEntryData) :
                new ObjectParameter("StockEntryData", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportStockEntry_Result>("ImportStockEntry", stockEntryDataParameter, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<ListWOForServiceEngineer_Result> ListWOForServiceEngineer(Nullable<int> orderStatusId, Nullable<int> engineerId)
        {
            var orderStatusIdParameter = orderStatusId.HasValue ?
                new ObjectParameter("OrderStatusId", orderStatusId) :
                new ObjectParameter("OrderStatusId", typeof(int));
    
            var engineerIdParameter = engineerId.HasValue ?
                new ObjectParameter("EngineerId", engineerId) :
                new ObjectParameter("EngineerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListWOForServiceEngineer_Result>("ListWOForServiceEngineer", orderStatusIdParameter, engineerIdParameter);
        }
    
        public virtual ObjectResult<GetLoggedInUserDetailsByToken_Result> GetLoggedInUserDetailsByToken(string token)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoggedInUserDetailsByToken_Result>("GetLoggedInUserDetailsByToken", tokenParameter);
        }
    
        public virtual ObjectResult<GetConfigurationsList_Result> GetConfigurationsList(string configKeys)
        {
            var configKeysParameter = configKeys != null ?
                new ObjectParameter("ConfigKeys", configKeys) :
                new ObjectParameter("ConfigKeys", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConfigurationsList_Result>("GetConfigurationsList", configKeysParameter);
        }
    
        public virtual ObjectResult<GetCustomerDetailsByMobile_Result> GetCustomerDetailsByMobile(string mobileNo)
        {
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerDetailsByMobile_Result>("GetCustomerDetailsByMobile", mobileNoParameter);
        }
    
        public virtual ObjectResult<GetProductModelDetails_Result> GetProductModelDetails(Nullable<int> prodModelId)
        {
            var prodModelIdParameter = prodModelId.HasValue ?
                new ObjectParameter("ProdModelId", prodModelId) :
                new ObjectParameter("ProdModelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductModelDetails_Result>("GetProductModelDetails", prodModelIdParameter);
        }
    
        public virtual ObjectResult<GetSOCustomerCommentsList_Result> GetSOCustomerCommentsList(Nullable<int> salesOrderId)
        {
            var salesOrderIdParameter = salesOrderId.HasValue ?
                new ObjectParameter("SalesOrderId", salesOrderId) :
                new ObjectParameter("SalesOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSOCustomerCommentsList_Result>("GetSOCustomerCommentsList", salesOrderIdParameter);
        }
    
        public virtual ObjectResult<GetUsersAddresses_Result> GetUsersAddresses(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersAddresses_Result>("GetUsersAddresses", userIdParameter);
        }
    
        public virtual ObjectResult<GetSOEnquiriesListForCustomer_Result> GetSOEnquiriesListForCustomer(Nullable<int> loggedInUserId, Nullable<int> enquiryStatusId, string searchValue)
        {
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var enquiryStatusIdParameter = enquiryStatusId.HasValue ?
                new ObjectParameter("EnquiryStatusId", enquiryStatusId) :
                new ObjectParameter("EnquiryStatusId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSOEnquiriesListForCustomer_Result>("GetSOEnquiriesListForCustomer", loggedInUserIdParameter, enquiryStatusIdParameter, searchValueParameter);
        }
    
        public virtual ObjectResult<GetModuleMasterList_Result> GetModuleMasterList(string moduleName, string appType)
        {
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetModuleMasterList_Result>("GetModuleMasterList", moduleNameParameter, appTypeParameter);
        }
    
        public virtual ObjectResult<GetRoleDetailsById_Result> GetRoleDetailsById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoleDetailsById_Result>("GetRoleDetailsById", idParameter);
        }
    
        public virtual ObjectResult<GetRoles_Result> GetRoles(string roleName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoles_Result>("GetRoles", roleNameParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SaveRoleDetails(Nullable<long> roleId, string roleName, Nullable<bool> isActive, Nullable<long> loggedInUserId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(long));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SaveRoleDetails", roleIdParameter, roleNameParameter, isActiveParameter, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SaveRoleMaster_PermissionDetails(Nullable<long> rolePermissionId, Nullable<long> roleId, Nullable<long> moduleId, string appType, Nullable<bool> view, Nullable<bool> add, Nullable<bool> edit, Nullable<long> employeeId, Nullable<bool> isActive, Nullable<long> loggedInUserId)
        {
            var rolePermissionIdParameter = rolePermissionId.HasValue ?
                new ObjectParameter("RolePermissionId", rolePermissionId) :
                new ObjectParameter("RolePermissionId", typeof(long));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(long));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(long));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            var viewParameter = view.HasValue ?
                new ObjectParameter("View", view) :
                new ObjectParameter("View", typeof(bool));
    
            var addParameter = add.HasValue ?
                new ObjectParameter("Add", add) :
                new ObjectParameter("Add", typeof(bool));
    
            var editParameter = edit.HasValue ?
                new ObjectParameter("Edit", edit) :
                new ObjectParameter("Edit", typeof(bool));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SaveRoleMaster_PermissionDetails", rolePermissionIdParameter, roleIdParameter, moduleIdParameter, appTypeParameter, viewParameter, addParameter, editParameter, employeeIdParameter, isActiveParameter, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<GetEmployeesListByRole_Result> GetEmployeesListByRole(string empCode)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesListByRole_Result>("GetEmployeesListByRole", empCodeParameter);
        }
    
        public virtual ObjectResult<GetLeaveDetailsById_Result> GetLeaveDetailsById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveDetailsById_Result>("GetLeaveDetailsById", idParameter);
        }
    
        public virtual ObjectResult<GetBranchListByCompany_Result> GetBranchListByCompany(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBranchListByCompany_Result>("GetBranchListByCompany", idParameter);
        }
    
        public virtual ObjectResult<GetBranchListByState_Result> GetBranchListByState(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBranchListByState_Result>("GetBranchListByState", idParameter);
        }
    
        public virtual ObjectResult<GetAreaList_Result> GetAreaList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAreaList_Result>("GetAreaList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetCityList_Result> GetCityList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCityList_Result>("GetCityList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetCountryList_Result> GetCountryList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountryList_Result>("GetCountryList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetDepartmentList_Result> GetDepartmentList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartmentList_Result>("GetDepartmentList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetPincodeList_Result> GetPincodeList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPincodeList_Result>("GetPincodeList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetStateList_Result> GetStateList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStateList_Result>("GetStateList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetStockPartStatusList_Result> GetStockPartStatusList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockPartStatusList_Result>("GetStockPartStatusList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetDelayTypeList_Result> GetDelayTypeList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDelayTypeList_Result>("GetDelayTypeList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetRepairClassTypeList_Result> GetRepairClassTypeList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepairClassTypeList_Result>("GetRepairClassTypeList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetRescheduleReasonList_Result> GetRescheduleReasonList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRescheduleReasonList_Result>("GetRescheduleReasonList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetTravelRangeList_Result> GetTravelRangeList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTravelRangeList_Result>("GetTravelRangeList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetGSTMappingList_Result> GetGSTMappingList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGSTMappingList_Result>("GetGSTMappingList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetRoleHierarchy_Result> GetRoleHierarchy(Nullable<int> reportingTo, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var reportingToParameter = reportingTo.HasValue ?
                new ObjectParameter("ReportingTo", reportingTo) :
                new ObjectParameter("ReportingTo", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoleHierarchy_Result>("GetRoleHierarchy", reportingToParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetAccessoriesList_Result> GetAccessoriesList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessoriesList_Result>("GetAccessoriesList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetCompanyTypeList_Result> GetCompanyTypeList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyTypeList_Result>("GetCompanyTypeList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetHSNCodeGSTMappingList_Result> GetHSNCodeGSTMappingList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHSNCodeGSTMappingList_Result>("GetHSNCodeGSTMappingList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetIssueDescriptionList_Result> GetIssueDescriptionList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIssueDescriptionList_Result>("GetIssueDescriptionList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetLeaveTypeList_Result> GetLeaveTypeList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveTypeList_Result>("GetLeaveTypeList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetOperatingSystemList_Result> GetOperatingSystemList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOperatingSystemList_Result>("GetOperatingSystemList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetPaymentTermsList_Result> GetPaymentTermsList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentTermsList_Result>("GetPaymentTermsList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetPriorityList_Result> GetPriorityList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPriorityList_Result>("GetPriorityList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetSalesOrderStatusList_Result> GetSalesOrderStatusList(Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesOrderStatusList_Result>("GetSalesOrderStatusList", isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetSupportTypeList_Result> GetSupportTypeList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupportTypeList_Result>("GetSupportTypeList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetWarrantyTypeList_Result> GetWarrantyTypeList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWarrantyTypeList_Result>("GetWarrantyTypeList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetRolesList_Result> GetRolesList(Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRolesList_Result>("GetRolesList", isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetReportingToEmployeeForSelectList_Result> GetReportingToEmployeeForSelectList(Nullable<long> roleId, Nullable<long> regionId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(long));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportingToEmployeeForSelectList_Result>("GetReportingToEmployeeForSelectList", roleIdParameter, regionIdParameter);
        }
    
        public virtual ObjectResult<GetGST_N_StateCode_ByCompanyNState_Result> GetGST_N_StateCode_ByCompanyNState(Nullable<int> companyId, Nullable<int> stateId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGST_N_StateCode_ByCompanyNState_Result>("GetGST_N_StateCode_ByCompanyNState", companyIdParameter, stateIdParameter);
        }
    
        public virtual ObjectResult<GetProductDescriptionList_Result> GetProductDescriptionList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductDescriptionList_Result>("GetProductDescriptionList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetSOEnquiryDetailsForCustomer_Result> GetSOEnquiryDetailsForCustomer(Nullable<int> customerId, Nullable<int> sOEnquiryId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var sOEnquiryIdParameter = sOEnquiryId.HasValue ?
                new ObjectParameter("SOEnquiryId", sOEnquiryId) :
                new ObjectParameter("SOEnquiryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSOEnquiryDetailsForCustomer_Result>("GetSOEnquiryDetailsForCustomer", customerIdParameter, sOEnquiryIdParameter);
        }
    
        public virtual ObjectResult<GetCaseStatusList_Result> GetCaseStatusList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCaseStatusList_Result>("GetCaseStatusList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetBusinessType_Result> GetBusinessType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBusinessType_Result>("GetBusinessType");
        }
    
        public virtual ObjectResult<GetEmployeesList_Result> GetEmployeesList(string empCode, string empName, string email, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesList_Result>("GetEmployeesList", empCodeParameter, empNameParameter, emailParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetSalesOrderDetails_Result> GetSalesOrderDetails(string salesOrderNo)
        {
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("SalesOrderNo", salesOrderNo) :
                new ObjectParameter("SalesOrderNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesOrderDetails_Result>("GetSalesOrderDetails", salesOrderNoParameter);
        }
    
        public virtual ObjectResult<GetRoleMaster_EmployeePermissionList_Result> GetRoleMaster_EmployeePermissionList(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoleMaster_EmployeePermissionList_Result>("GetRoleMaster_EmployeePermissionList", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetBranchList_Result> GetBranchList(Nullable<int> companyId, string branchId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBranchList_Result>("GetBranchList", companyIdParameter, branchIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetCompanyList_Result> GetCompanyList(Nullable<int> companyId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyList_Result>("GetCompanyList", companyIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetClaimSettlementItemAttachmentById_Result> GetClaimSettlementItemAttachmentById(Nullable<int> claimSettlementItemId)
        {
            var claimSettlementItemIdParameter = claimSettlementItemId.HasValue ?
                new ObjectParameter("ClaimSettlementItemId", claimSettlementItemId) :
                new ObjectParameter("ClaimSettlementItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClaimSettlementItemAttachmentById_Result>("GetClaimSettlementItemAttachmentById", claimSettlementItemIdParameter);
        }
    
        public virtual ObjectResult<GetClaimSettlementItemById_Result> GetClaimSettlementItemById(Nullable<int> claimSettlementId)
        {
            var claimSettlementIdParameter = claimSettlementId.HasValue ?
                new ObjectParameter("ClaimSettlementId", claimSettlementId) :
                new ObjectParameter("ClaimSettlementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClaimSettlementItemById_Result>("GetClaimSettlementItemById", claimSettlementIdParameter);
        }
    
        public virtual ObjectResult<GetSOEnquiryProductsList_Result> GetSOEnquiryProductsList(Nullable<int> sOEnquiryId)
        {
            var sOEnquiryIdParameter = sOEnquiryId.HasValue ?
                new ObjectParameter("SOEnquiryId", sOEnquiryId) :
                new ObjectParameter("SOEnquiryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSOEnquiryProductsList_Result>("GetSOEnquiryProductsList", sOEnquiryIdParameter);
        }
    
        public virtual ObjectResult<GetSalesOrderProductsList_Result> GetSalesOrderProductsList(Nullable<int> salesOrderId)
        {
            var salesOrderIdParameter = salesOrderId.HasValue ?
                new ObjectParameter("SalesOrderId", salesOrderId) :
                new ObjectParameter("SalesOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesOrderProductsList_Result>("GetSalesOrderProductsList", salesOrderIdParameter);
        }
    
        public virtual ObjectResult<GetStockTransferList_Result> GetStockTransferList(string dockerNo, Nullable<int> userid)
        {
            var dockerNoParameter = dockerNo != null ?
                new ObjectParameter("DockerNo", dockerNo) :
                new ObjectParameter("DockerNo", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockTransferList_Result>("GetStockTransferList", dockerNoParameter, useridParameter);
        }
    
        public virtual ObjectResult<GetStockTransferInOutByChallanNumber_Result> GetStockTransferInOutByChallanNumber(string challanNumber)
        {
            var challanNumberParameter = challanNumber != null ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockTransferInOutByChallanNumber_Result>("GetStockTransferInOutByChallanNumber", challanNumberParameter);
        }
    
        public virtual ObjectResult<GetStockTransferInChallanList_Result> GetStockTransferInChallanList(Nullable<int> companyId, string branchId, string challanNumber, string dockerNo, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var challanNumberParameter = challanNumber != null ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(string));
    
            var dockerNoParameter = dockerNo != null ?
                new ObjectParameter("DockerNo", dockerNo) :
                new ObjectParameter("DockerNo", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockTransferInChallanList_Result>("GetStockTransferInChallanList", companyIdParameter, branchIdParameter, challanNumberParameter, dockerNoParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetRatePerKMList_Result> GetRatePerKMList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRatePerKMList_Result>("GetRatePerKMList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetVehicleTypeList_Result> GetVehicleTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVehicleTypeList_Result>("GetVehicleTypeList");
        }
    
        public virtual ObjectResult<GetPaymentPolicyList_Result> GetPaymentPolicyList(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentPolicyList_Result>("GetPaymentPolicyList", isActiveParameter);
        }
    
        public virtual ObjectResult<GetPrivacyAndPolicyList_Result> GetPrivacyAndPolicyList(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPrivacyAndPolicyList_Result>("GetPrivacyAndPolicyList", isActiveParameter);
        }
    
        public virtual ObjectResult<GetRefundAndCancellationPolicyList_Result> GetRefundAndCancellationPolicyList(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRefundAndCancellationPolicyList_Result>("GetRefundAndCancellationPolicyList", isActiveParameter);
        }
    
        public virtual ObjectResult<GetTermsAndConditionList_Result> GetTermsAndConditionList(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTermsAndConditionList_Result>("GetTermsAndConditionList", isActiveParameter);
        }
    
        public virtual ObjectResult<GetEngineerVisitHistoryList_Result> GetEngineerVisitHistoryList(Nullable<int> engineerId, string workOrderNumber)
        {
            var engineerIdParameter = engineerId.HasValue ?
                new ObjectParameter("EngineerId", engineerId) :
                new ObjectParameter("EngineerId", typeof(int));
    
            var workOrderNumberParameter = workOrderNumber != null ?
                new ObjectParameter("WorkOrderNumber", workOrderNumber) :
                new ObjectParameter("WorkOrderNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEngineerVisitHistoryList_Result>("GetEngineerVisitHistoryList", engineerIdParameter, workOrderNumberParameter);
        }
    
        public virtual ObjectResult<GetPartDetailTransferHistoryLogList_Result> GetPartDetailTransferHistoryLogList(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> partId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPartDetailTransferHistoryLogList_Result>("GetPartDetailTransferHistoryLogList", companyIdParameter, branchIdParameter, partIdParameter);
        }
    
        public virtual ObjectResult<GetStockTransferInList_Result> GetStockTransferInList(string challanNo, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockTransferInList_Result>("GetStockTransferInList", challanNoParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetStockAllocationToWorkOrderList_Result> GetStockAllocationToWorkOrderList(Nullable<int> companyId, string branchId, string workOrderNo, string partNumber, string partDesc, Nullable<int> allocatedBy, string filterType, Nullable<int> userId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var workOrderNoParameter = workOrderNo != null ?
                new ObjectParameter("WorkOrderNo", workOrderNo) :
                new ObjectParameter("WorkOrderNo", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var partDescParameter = partDesc != null ?
                new ObjectParameter("PartDesc", partDesc) :
                new ObjectParameter("PartDesc", typeof(string));
    
            var allocatedByParameter = allocatedBy.HasValue ?
                new ObjectParameter("AllocatedBy", allocatedBy) :
                new ObjectParameter("AllocatedBy", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockAllocationToWorkOrderList_Result>("GetStockAllocationToWorkOrderList", companyIdParameter, branchIdParameter, workOrderNoParameter, partNumberParameter, partDescParameter, allocatedByParameter, filterTypeParameter, userIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetStockAllocationToEngineerList_Result> GetStockAllocationToEngineerList(Nullable<int> companyId, string branchId, Nullable<int> engineerId, string engineerName, string partNumber, string partDesc, string type, string filterType, Nullable<int> userId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var engineerIdParameter = engineerId.HasValue ?
                new ObjectParameter("EngineerId", engineerId) :
                new ObjectParameter("EngineerId", typeof(int));
    
            var engineerNameParameter = engineerName != null ?
                new ObjectParameter("EngineerName", engineerName) :
                new ObjectParameter("EngineerName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var partDescParameter = partDesc != null ?
                new ObjectParameter("PartDesc", partDesc) :
                new ObjectParameter("PartDesc", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockAllocationToEngineerList_Result>("GetStockAllocationToEngineerList", companyIdParameter, branchIdParameter, engineerIdParameter, engineerNameParameter, partNumberParameter, partDescParameter, typeParameter, filterTypeParameter, userIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetStockAllocationToReturnList_Result> GetStockAllocationToReturnList(Nullable<int> companyId, string branchId, Nullable<int> engineerId, string engineerName, string partNumber, string partDesc, Nullable<int> statusId, Nullable<int> productStatusId, string type, string filterType, Nullable<int> userId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var engineerIdParameter = engineerId.HasValue ?
                new ObjectParameter("EngineerId", engineerId) :
                new ObjectParameter("EngineerId", typeof(int));
    
            var engineerNameParameter = engineerName != null ?
                new ObjectParameter("EngineerName", engineerName) :
                new ObjectParameter("EngineerName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var partDescParameter = partDesc != null ?
                new ObjectParameter("PartDesc", partDesc) :
                new ObjectParameter("PartDesc", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var productStatusIdParameter = productStatusId.HasValue ?
                new ObjectParameter("ProductStatusId", productStatusId) :
                new ObjectParameter("ProductStatusId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockAllocationToReturnList_Result>("GetStockAllocationToReturnList", companyIdParameter, branchIdParameter, engineerIdParameter, engineerNameParameter, partNumberParameter, partDescParameter, statusIdParameter, productStatusIdParameter, typeParameter, filterTypeParameter, userIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetStockTransferOutChallanList_Result> GetStockTransferOutChallanList(Nullable<int> companyId, string branchId, string challanNumber, string searchValue, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var challanNumberParameter = challanNumber != null ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockTransferOutChallanList_Result>("GetStockTransferOutChallanList", companyIdParameter, branchIdParameter, challanNumberParameter, searchValueParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetSOEnquiryList_Result> GetSOEnquiryList(Nullable<int> companyId, string branchId, Nullable<int> enquiryStatusId, Nullable<int> loggedInUserId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var enquiryStatusIdParameter = enquiryStatusId.HasValue ?
                new ObjectParameter("EnquiryStatusId", enquiryStatusId) :
                new ObjectParameter("EnquiryStatusId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSOEnquiryList_Result>("GetSOEnquiryList", companyIdParameter, branchIdParameter, enquiryStatusIdParameter, loggedInUserIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetStockOut_Defective_ChallanList_Result> GetStockOut_Defective_ChallanList(Nullable<int> companyId, string branchId, string challanNumber, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var challanNumberParameter = challanNumber != null ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockOut_Defective_ChallanList_Result>("GetStockOut_Defective_ChallanList", companyIdParameter, branchIdParameter, challanNumberParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetStockOut_DAO_ChallanList_Result> GetStockOut_DAO_ChallanList(Nullable<int> companyId, string branchId, string challanNumber, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var challanNumberParameter = challanNumber != null ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockOut_DAO_ChallanList_Result>("GetStockOut_DAO_ChallanList", companyIdParameter, branchIdParameter, challanNumberParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetStockOutDefectiveByChallanNumber_Result> GetStockOutDefectiveByChallanNumber(string challanNumber)
        {
            var challanNumberParameter = challanNumber != null ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockOutDefectiveByChallanNumber_Result>("GetStockOutDefectiveByChallanNumber", challanNumberParameter);
        }
    
        public virtual ObjectResult<GetStockOutDOAByChallanNumber_Result> GetStockOutDOAByChallanNumber(string challanNumber)
        {
            var challanNumberParameter = challanNumber != null ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockOutDOAByChallanNumber_Result>("GetStockOutDOAByChallanNumber", challanNumberParameter);
        }
    
        public virtual ObjectResult<GetTrackingOrderLog_Result> GetTrackingOrderLog(string module, Nullable<int> moduleUniqId)
        {
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var moduleUniqIdParameter = moduleUniqId.HasValue ?
                new ObjectParameter("ModuleUniqId", moduleUniqId) :
                new ObjectParameter("ModuleUniqId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrackingOrderLog_Result>("GetTrackingOrderLog", moduleParameter, moduleUniqIdParameter);
        }
    
        public virtual ObjectResult<GetEngineerList_Result> GetEngineerList(Nullable<int> companyId, string branchId, Nullable<int> userType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEngineerList_Result>("GetEngineerList", companyIdParameter, branchIdParameter, userTypeParameter);
        }
    
        public virtual ObjectResult<GetUsersTemporaryAddresses_Result> GetUsersTemporaryAddresses(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersTemporaryAddresses_Result>("GetUsersTemporaryAddresses", userIdParameter);
        }
    
        public virtual ObjectResult<GetWorkOrderRescheduleHistoryList_Result> GetWorkOrderRescheduleHistoryList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> workOrderId, Nullable<int> rescheduleReasonId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            var rescheduleReasonIdParameter = rescheduleReasonId.HasValue ?
                new ObjectParameter("RescheduleReasonId", rescheduleReasonId) :
                new ObjectParameter("RescheduleReasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkOrderRescheduleHistoryList_Result>("GetWorkOrderRescheduleHistoryList", fromDateParameter, toDateParameter, workOrderIdParameter, rescheduleReasonIdParameter);
        }
    
        public virtual ObjectResult<GetSalesOrdersList_Result> GetSalesOrdersList(Nullable<int> companyId, string branchId, Nullable<int> salesOrderStatusId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> loggedInUserId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var salesOrderStatusIdParameter = salesOrderStatusId.HasValue ?
                new ObjectParameter("SalesOrderStatusId", salesOrderStatusId) :
                new ObjectParameter("SalesOrderStatusId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesOrdersList_Result>("GetSalesOrdersList", companyIdParameter, branchIdParameter, salesOrderStatusIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<GetDashboard_WorkOrderSummary_Result> GetDashboard_WorkOrderSummary(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, string filterType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_WorkOrderSummary_Result>("GetDashboard_WorkOrderSummary", companyIdParameter, branchIdParameter, fromDateParameter, toDateParameter, userIdParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GetDashboard_CloseSummary_Result> GetDashboard_CloseSummary(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, string filterType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_CloseSummary_Result>("GetDashboard_CloseSummary", companyIdParameter, branchIdParameter, fromDateParameter, toDateParameter, userIdParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GetDashboard_Customer_Result> GetDashboard_Customer(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_Customer_Result>("GetDashboard_Customer", fromDateParameter, toDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetDashboard_SalesOrderSummary_Result> GetDashboard_SalesOrderSummary(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, string filterType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_SalesOrderSummary_Result>("GetDashboard_SalesOrderSummary", companyIdParameter, branchIdParameter, fromDateParameter, toDateParameter, userIdParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GetDashboard_StockSummary_Result> GetDashboard_StockSummary(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, string filterType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_StockSummary_Result>("GetDashboard_StockSummary", companyIdParameter, branchIdParameter, fromDateParameter, toDateParameter, userIdParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GetDashboard_StockSummary_Inventory_Result> GetDashboard_StockSummary_Inventory(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, string filterType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_StockSummary_Inventory_Result>("GetDashboard_StockSummary_Inventory", companyIdParameter, branchIdParameter, fromDateParameter, toDateParameter, userIdParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GetPartsListForAllocation_Result> GetPartsListForAllocation(Nullable<int> companyId, string branchId, string searchValue, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPartsListForAllocation_Result>("GetPartsListForAllocation", companyIdParameter, branchIdParameter, searchValueParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetPartDetailList_Result> GetPartDetailList(Nullable<int> id, Nullable<int> companyId, string branchId, string searchValue, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPartDetailList_Result>("GetPartDetailList", idParameter, companyIdParameter, branchIdParameter, searchValueParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetVendorsList_Result> GetVendorsList(Nullable<int> countryId, Nullable<int> stateId, Nullable<int> cityId, Nullable<int> areaId, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorsList_Result>("GetVendorsList", countryIdParameter, stateIdParameter, cityIdParameter, areaIdParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetCustomerList_Result> GetCustomerList(Nullable<int> customerId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerList_Result>("GetCustomerList", customerIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetWorkOrderEnquiriesList_Result> GetWorkOrderEnquiriesList(Nullable<int> companyId, string branchId, Nullable<int> enquiryStatusId, Nullable<int> loggedInUserId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var enquiryStatusIdParameter = enquiryStatusId.HasValue ?
                new ObjectParameter("EnquiryStatusId", enquiryStatusId) :
                new ObjectParameter("EnquiryStatusId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkOrderEnquiriesList_Result>("GetWorkOrderEnquiriesList", companyIdParameter, branchIdParameter, enquiryStatusIdParameter, loggedInUserIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetWOEnquiryDetailsForCustomer_Result> GetWOEnquiryDetailsForCustomer(Nullable<int> customerId, Nullable<int> wOEnquiryId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var wOEnquiryIdParameter = wOEnquiryId.HasValue ?
                new ObjectParameter("WOEnquiryId", wOEnquiryId) :
                new ObjectParameter("WOEnquiryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWOEnquiryDetailsForCustomer_Result>("GetWOEnquiryDetailsForCustomer", customerIdParameter, wOEnquiryIdParameter);
        }
    
        public virtual ObjectResult<GetWOCustomerFeedbackList_Result> GetWOCustomerFeedbackList(string workOrderNo, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var workOrderNoParameter = workOrderNo != null ?
                new ObjectParameter("WorkOrderNo", workOrderNo) :
                new ObjectParameter("WorkOrderNo", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWOCustomerFeedbackList_Result>("GetWOCustomerFeedbackList", workOrderNoParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetRequestForAdvanceList_Result> GetRequestForAdvanceList(Nullable<int> companyId, string branchId, Nullable<int> employeeId, string claimId, string advanceStatusId, string filterType, Nullable<int> userId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var claimIdParameter = claimId != null ?
                new ObjectParameter("ClaimId", claimId) :
                new ObjectParameter("ClaimId", typeof(string));
    
            var advanceStatusIdParameter = advanceStatusId != null ?
                new ObjectParameter("AdvanceStatusId", advanceStatusId) :
                new ObjectParameter("AdvanceStatusId", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRequestForAdvanceList_Result>("GetRequestForAdvanceList", companyIdParameter, branchIdParameter, employeeIdParameter, claimIdParameter, advanceStatusIdParameter, filterTypeParameter, userIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetClaimSettlementList_Result> GetClaimSettlementList(Nullable<int> companyId, string branchId, Nullable<int> claimSattlementId, Nullable<int> employeeId, string claimId, string settlementStatusId, string filterType, Nullable<int> userId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var claimSattlementIdParameter = claimSattlementId.HasValue ?
                new ObjectParameter("ClaimSattlementId", claimSattlementId) :
                new ObjectParameter("ClaimSattlementId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var claimIdParameter = claimId != null ?
                new ObjectParameter("ClaimId", claimId) :
                new ObjectParameter("ClaimId", typeof(string));
    
            var settlementStatusIdParameter = settlementStatusId != null ?
                new ObjectParameter("SettlementStatusId", settlementStatusId) :
                new ObjectParameter("SettlementStatusId", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClaimSettlementList_Result>("GetClaimSettlementList", companyIdParameter, branchIdParameter, claimSattlementIdParameter, employeeIdParameter, claimIdParameter, settlementStatusIdParameter, filterTypeParameter, userIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetTravelClaimList_Result> GetTravelClaimList(Nullable<int> companyId, string branchId, Nullable<int> employeeId, string workOrderNumber, string statusId, string filterType, Nullable<int> userId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var workOrderNumberParameter = workOrderNumber != null ?
                new ObjectParameter("WorkOrderNumber", workOrderNumber) :
                new ObjectParameter("WorkOrderNumber", typeof(string));
    
            var statusIdParameter = statusId != null ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTravelClaimList_Result>("GetTravelClaimList", companyIdParameter, branchIdParameter, employeeIdParameter, workOrderNumberParameter, statusIdParameter, filterTypeParameter, userIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetBannerList_Result> GetBannerList(string appType, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBannerList_Result>("GetBannerList", appTypeParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetOfferAdsList_Result> GetOfferAdsList(string appType, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOfferAdsList_Result>("GetOfferAdsList", appTypeParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetOurProductList_Result> GetOurProductList(string appType, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOurProductList_Result>("GetOurProductList", appTypeParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetOurServiceList_Result> GetOurServiceList(string appType, Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOurServiceList_Result>("GetOurServiceList", appTypeParameter, isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual int SaveEmployeeRolePermission(Nullable<int> roleId, Nullable<int> employeeId, Nullable<int> createdBy)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveEmployeeRolePermission", roleIdParameter, employeeIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<GetTestimonialList_Result> GetTestimonialList(Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTestimonialList_Result>("GetTestimonialList", isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetCareerPostList_Result> GetCareerPostList(Nullable<bool> isActive, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCareerPostList_Result>("GetCareerPostList", isActiveParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetInventoryReport_Result> GetInventoryReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, string branchId, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventoryReport_Result>("GetInventoryReport", fromDateParameter, toDateParameter, companyIdParameter, branchIdParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetSalesReport_Result> GetSalesReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, string branchId, Nullable<int> stateId, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesReport_Result>("GetSalesReport", fromDateParameter, toDateParameter, companyIdParameter, branchIdParameter, stateIdParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetWorkOrderCloserReport_Result> GetWorkOrderCloserReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, string branchId, Nullable<int> stateId, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkOrderCloserReport_Result>("GetWorkOrderCloserReport", fromDateParameter, toDateParameter, companyIdParameter, branchIdParameter, stateIdParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetWorkOrderEnquiryReport_Result> GetWorkOrderEnquiryReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, string branchId, Nullable<int> stateId, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkOrderEnquiryReport_Result>("GetWorkOrderEnquiryReport", fromDateParameter, toDateParameter, companyIdParameter, branchIdParameter, stateIdParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetWorkOrderCreationReport_Result> GetWorkOrderCreationReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, string branchId, Nullable<int> stateId, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkOrderCreationReport_Result>("GetWorkOrderCreationReport", fromDateParameter, toDateParameter, companyIdParameter, branchIdParameter, stateIdParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetLeaves_Result> GetLeaves(Nullable<int> companyId, string branchId, string employeeName, string leaveType, string leaveReason, Nullable<int> leaveStatusId, Nullable<bool> isActive, Nullable<int> employeeId, string filterType, Nullable<int> loggedInUserId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var leaveReasonParameter = leaveReason != null ?
                new ObjectParameter("LeaveReason", leaveReason) :
                new ObjectParameter("LeaveReason", typeof(string));
    
            var leaveStatusIdParameter = leaveStatusId.HasValue ?
                new ObjectParameter("LeaveStatusId", leaveStatusId) :
                new ObjectParameter("LeaveStatusId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaves_Result>("GetLeaves", companyIdParameter, branchIdParameter, employeeNameParameter, leaveTypeParameter, leaveReasonParameter, leaveStatusIdParameter, isActiveParameter, employeeIdParameter, filterTypeParameter, loggedInUserIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetAttendanceHistoryList_Result> GetAttendanceHistoryList(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromPunchInDate, Nullable<System.DateTime> toPunchInDate, string employeeName, Nullable<int> employeeId, string filterType, Nullable<int> loggedInUserId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromPunchInDateParameter = fromPunchInDate.HasValue ?
                new ObjectParameter("FromPunchInDate", fromPunchInDate) :
                new ObjectParameter("FromPunchInDate", typeof(System.DateTime));
    
            var toPunchInDateParameter = toPunchInDate.HasValue ?
                new ObjectParameter("ToPunchInDate", toPunchInDate) :
                new ObjectParameter("ToPunchInDate", typeof(System.DateTime));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttendanceHistoryList_Result>("GetAttendanceHistoryList", companyIdParameter, branchIdParameter, fromPunchInDateParameter, toPunchInDateParameter, employeeNameParameter, employeeIdParameter, filterTypeParameter, loggedInUserIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetPartDescriptionList_Result> GetPartDescriptionList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPartDescriptionList_Result>("GetPartDescriptionList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetOrderTypesListForSelectList_Result> GetOrderTypesListForSelectList(string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderTypesListForSelectList_Result>("GetOrderTypesListForSelectList", searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetEmployeesListByReportingTo_Result> GetEmployeesListByReportingTo(Nullable<long> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesListByReportingTo_Result>("GetEmployeesListByReportingTo", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetInvoiceList_Result> GetInvoiceList(Nullable<int> companyId, string branchId, string invoiceNumber, string workOrderNumber, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var workOrderNumberParameter = workOrderNumber != null ?
                new ObjectParameter("WorkOrderNumber", workOrderNumber) :
                new ObjectParameter("WorkOrderNumber", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceList_Result>("GetInvoiceList", companyIdParameter, branchIdParameter, invoiceNumberParameter, workOrderNumberParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetInvoiceReport_Result> GetInvoiceReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, string branchId, Nullable<int> stateId, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceReport_Result>("GetInvoiceReport", fromDateParameter, toDateParameter, companyIdParameter, branchIdParameter, stateIdParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetDashboard_WorkOrderAllocated_Result> GetDashboard_WorkOrderAllocated(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, string filterType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_WorkOrderAllocated_Result>("GetDashboard_WorkOrderAllocated", companyIdParameter, branchIdParameter, fromDateParameter, toDateParameter, userIdParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GetWorkOrderDetails_Result> GetWorkOrderDetails(string workOrderNumber)
        {
            var workOrderNumberParameter = workOrderNumber != null ?
                new ObjectParameter("WorkOrderNumber", workOrderNumber) :
                new ObjectParameter("WorkOrderNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkOrderDetails_Result>("GetWorkOrderDetails", workOrderNumberParameter);
        }
    
        public virtual ObjectResult<GetDashboard_QuotationSummary_Result> GetDashboard_QuotationSummary(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, string filterType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_QuotationSummary_Result>("GetDashboard_QuotationSummary", companyIdParameter, branchIdParameter, fromDateParameter, toDateParameter, userIdParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GetDashboard_InvoiceSummary_Result> GetDashboard_InvoiceSummary(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, string filterType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_InvoiceSummary_Result>("GetDashboard_InvoiceSummary", companyIdParameter, branchIdParameter, fromDateParameter, toDateParameter, userIdParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<GetWOEnquiriesListForCustomer_Result> GetWOEnquiriesListForCustomer(Nullable<int> loggedInUserId, Nullable<int> enquiryStatusId, string searchValue)
        {
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var enquiryStatusIdParameter = enquiryStatusId.HasValue ?
                new ObjectParameter("EnquiryStatusId", enquiryStatusId) :
                new ObjectParameter("EnquiryStatusId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWOEnquiriesListForCustomer_Result>("GetWOEnquiriesListForCustomer", loggedInUserIdParameter, enquiryStatusIdParameter, searchValueParameter);
        }
    
        public virtual ObjectResult<GetQuotationList_Result> GetQuotationList(Nullable<int> companyId, string branchId, string quotationNumber, string workOrderNumber, Nullable<int> statusId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var quotationNumberParameter = quotationNumber != null ?
                new ObjectParameter("QuotationNumber", quotationNumber) :
                new ObjectParameter("QuotationNumber", typeof(string));
    
            var workOrderNumberParameter = workOrderNumber != null ?
                new ObjectParameter("WorkOrderNumber", workOrderNumber) :
                new ObjectParameter("WorkOrderNumber", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuotationList_Result>("GetQuotationList", companyIdParameter, branchIdParameter, quotationNumberParameter, workOrderNumberParameter, statusIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total, userIdParameter);
        }
    
        public virtual ObjectResult<GetWorkOrderList_Result> GetWorkOrderList(Nullable<int> companyId, string branchId, string workOrderNumber, string warrantyType, Nullable<int> userId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var workOrderNumberParameter = workOrderNumber != null ?
                new ObjectParameter("WorkOrderNumber", workOrderNumber) :
                new ObjectParameter("WorkOrderNumber", typeof(string));
    
            var warrantyTypeParameter = warrantyType != null ?
                new ObjectParameter("WarrantyType", warrantyType) :
                new ObjectParameter("WarrantyType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkOrderList_Result>("GetWorkOrderList", companyIdParameter, branchIdParameter, workOrderNumberParameter, warrantyTypeParameter, userIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<ImportPartDetails_Result> ImportPartDetails(string xmlPartDetailsData, Nullable<long> loggedInUserId)
        {
            var xmlPartDetailsDataParameter = xmlPartDetailsData != null ?
                new ObjectParameter("XmlPartDetailsData", xmlPartDetailsData) :
                new ObjectParameter("XmlPartDetailsData", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportPartDetails_Result>("ImportPartDetails", xmlPartDetailsDataParameter, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<ImportArea_Result> ImportArea(string xmlAreaData, Nullable<long> loggedInUserId)
        {
            var xmlAreaDataParameter = xmlAreaData != null ?
                new ObjectParameter("XmlAreaData", xmlAreaData) :
                new ObjectParameter("XmlAreaData", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportArea_Result>("ImportArea", xmlAreaDataParameter, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<ImportCity_Result> ImportCity(string xmlCityData, Nullable<long> loggedInUserId)
        {
            var xmlCityDataParameter = xmlCityData != null ?
                new ObjectParameter("XmlCityData", xmlCityData) :
                new ObjectParameter("XmlCityData", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportCity_Result>("ImportCity", xmlCityDataParameter, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<ImportPincode_Result> ImportPincode(string xmlPincodeData, Nullable<long> loggedInUserId)
        {
            var xmlPincodeDataParameter = xmlPincodeData != null ?
                new ObjectParameter("XmlPincodeData", xmlPincodeData) :
                new ObjectParameter("XmlPincodeData", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportPincode_Result>("ImportPincode", xmlPincodeDataParameter, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<ImportState_Result> ImportState(string xmlStateData, Nullable<long> loggedInUserId)
        {
            var xmlStateDataParameter = xmlStateData != null ?
                new ObjectParameter("XmlStateData", xmlStateData) :
                new ObjectParameter("XmlStateData", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportState_Result>("ImportState", xmlStateDataParameter, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<ImportCustomer_Result> ImportCustomer(string xmlCustomerData, Nullable<long> loggedInUserId)
        {
            var xmlCustomerDataParameter = xmlCustomerData != null ?
                new ObjectParameter("XmlCustomerData", xmlCustomerData) :
                new ObjectParameter("XmlCustomerData", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportCustomer_Result>("ImportCustomer", xmlCustomerDataParameter, loggedInUserIdParameter);
        }
    
        public virtual ObjectResult<GetRoleMaster_PermissionList_Result> GetRoleMaster_PermissionList(Nullable<int> roleId, Nullable<int> employeeId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoleMaster_PermissionList_Result>("GetRoleMaster_PermissionList", roleIdParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<GetDashboard_SalesOrderEnquirySummary_Result> GetDashboard_SalesOrderEnquirySummary(Nullable<int> companyId, string branchId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userId, string filterType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboard_SalesOrderEnquirySummary_Result>("GetDashboard_SalesOrderEnquirySummary", companyIdParameter, branchIdParameter, fromDateParameter, toDateParameter, userIdParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SaveLogDetails(string module, Nullable<int> moduleUniqId, string logDesc, string remarks, Nullable<long> userId)
        {
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var moduleUniqIdParameter = moduleUniqId.HasValue ?
                new ObjectParameter("ModuleUniqId", moduleUniqId) :
                new ObjectParameter("ModuleUniqId", typeof(int));
    
            var logDescParameter = logDesc != null ?
                new ObjectParameter("LogDesc", logDesc) :
                new ObjectParameter("LogDesc", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SaveLogDetails", moduleParameter, moduleUniqIdParameter, logDescParameter, remarksParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetWOEnquiryLogDetailsList_Result> GetWOEnquiryLogDetailsList(string module, Nullable<int> moduleUniqId)
        {
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var moduleUniqIdParameter = moduleUniqId.HasValue ?
                new ObjectParameter("ModuleUniqId", moduleUniqId) :
                new ObjectParameter("ModuleUniqId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWOEnquiryLogDetailsList_Result>("GetWOEnquiryLogDetailsList", moduleParameter, moduleUniqIdParameter);
        }
    
        public virtual ObjectResult<GetWorkOrderLogDetailsList_Result> GetWorkOrderLogDetailsList(string module, string moduleUniqId)
        {
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var moduleUniqIdParameter = moduleUniqId != null ?
                new ObjectParameter("ModuleUniqId", moduleUniqId) :
                new ObjectParameter("ModuleUniqId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkOrderLogDetailsList_Result>("GetWorkOrderLogDetailsList", moduleParameter, moduleUniqIdParameter);
        }
    
        public virtual ObjectResult<GetCSOOnSiteDetails_Result> GetCSOOnSiteDetails(string workOrderNumber)
        {
            var workOrderNumberParameter = workOrderNumber != null ?
                new ObjectParameter("WorkOrderNumber", workOrderNumber) :
                new ObjectParameter("WorkOrderNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCSOOnSiteDetails_Result>("GetCSOOnSiteDetails", workOrderNumberParameter);
        }
    
        public virtual ObjectResult<GetCSOOffSiteDetails_Result> GetCSOOffSiteDetails(string workOrderNumber)
        {
            var workOrderNumberParameter = workOrderNumber != null ?
                new ObjectParameter("WorkOrderNumber", workOrderNumber) :
                new ObjectParameter("WorkOrderNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCSOOffSiteDetails_Result>("GetCSOOffSiteDetails", workOrderNumberParameter);
        }
    
        public virtual ObjectResult<GetWOListForEmployees_Result> GetWOListForEmployees(Nullable<int> companyId, string branchId, Nullable<int> orderStatusId, Nullable<int> engineerId, Nullable<int> userId, string filterType, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var orderStatusIdParameter = orderStatusId.HasValue ?
                new ObjectParameter("OrderStatusId", orderStatusId) :
                new ObjectParameter("OrderStatusId", typeof(int));
    
            var engineerIdParameter = engineerId.HasValue ?
                new ObjectParameter("EngineerId", engineerId) :
                new ObjectParameter("EngineerId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWOListForEmployees_Result>("GetWOListForEmployees", companyIdParameter, branchIdParameter, orderStatusIdParameter, engineerIdParameter, userIdParameter, filterTypeParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetNotificationList_Result> GetNotificationList(Nullable<int> loggedInUserId, Nullable<System.DateTime> notifyDate, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var notifyDateParameter = notifyDate.HasValue ?
                new ObjectParameter("NotifyDate", notifyDate) :
                new ObjectParameter("NotifyDate", typeof(System.DateTime));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotificationList_Result>("GetNotificationList", loggedInUserIdParameter, notifyDateParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetPaymentDetails_Result> GetPaymentDetails(string merchantTransactionId, string transactionId)
        {
            var merchantTransactionIdParameter = merchantTransactionId != null ?
                new ObjectParameter("MerchantTransactionId", merchantTransactionId) :
                new ObjectParameter("MerchantTransactionId", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentDetails_Result>("GetPaymentDetails", merchantTransactionIdParameter, transactionIdParameter);
        }
    
        public virtual ObjectResult<GetPaymentList_Result> GetPaymentList(string workOrderNumber, string quotationNumber, string merchantTransactionId, string transactionId, string searchValue, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var workOrderNumberParameter = workOrderNumber != null ?
                new ObjectParameter("WorkOrderNumber", workOrderNumber) :
                new ObjectParameter("WorkOrderNumber", typeof(string));
    
            var quotationNumberParameter = quotationNumber != null ?
                new ObjectParameter("QuotationNumber", quotationNumber) :
                new ObjectParameter("QuotationNumber", typeof(string));
    
            var merchantTransactionIdParameter = merchantTransactionId != null ?
                new ObjectParameter("MerchantTransactionId", merchantTransactionId) :
                new ObjectParameter("MerchantTransactionId", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentList_Result>("GetPaymentList", workOrderNumberParameter, quotationNumberParameter, merchantTransactionIdParameter, transactionIdParameter, searchValueParameter, pageSizeParameter, pageNoParameter, total);
        }
    
        public virtual ObjectResult<GetEmployeesForSelectList_Result> GetEmployeesForSelectList(string branchId)
        {
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesForSelectList_Result>("GetEmployeesForSelectList", branchIdParameter);
        }
    
        public virtual ObjectResult<GetQuotationReport_Result> GetQuotationReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> companyId, string branchId, Nullable<int> stateId, Nullable<int> userId, Nullable<int> pageSize, Nullable<int> pageNo, ObjectParameter total)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuotationReport_Result>("GetQuotationReport", fromDateParameter, toDateParameter, companyIdParameter, branchIdParameter, stateIdParameter, userIdParameter, pageSizeParameter, pageNoParameter, total);
        }
    }
}
