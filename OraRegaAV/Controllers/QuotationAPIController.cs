using DocumentFormat.OpenXml.Office2010.Excel;
using DocumentFormat.OpenXml.Office2016.Drawing.ChartDrawing;
using DocumentFormat.OpenXml.Spreadsheet;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using OraRegaAV.Controllers.API;
using OraRegaAV.DBEntity;
using OraRegaAV.Helpers;
using OraRegaAV.Models;
using OraRegaAV.Models.Constants;
using OraRegaAV.Models.Enums;
using Org.BouncyCastle.Asn1.Ocsp;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Migrations;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http;
using System.Web.UI.WebControls;

namespace OraRegaAV.Controllers
{
    public class QuotationAPIController : ApiCustomBaseController
    {
        private readonly dbOraRegaEntities db = new dbOraRegaEntities();
        private Response _response = new Response();
        TrackingModuleLog trackingModuleLog = new TrackingModuleLog();

        public QuotationAPIController()
        {
            _response.IsSuccess = true;
        }

        [HttpPost]
        [Route("api/QuotationAPI/GenerateQuotation")]
        public Response GenerateQuotation(string WorkOrderNumber)
        {
            Quotation quotationObj = new Quotation();

            try
            {
                var workOrderObj = db.GetWorkOrderDetails(WorkOrderNumber).FirstOrDefault();

                var tbl = db.tblQuotations.Where(x => x.WorkOrderId == workOrderObj.Id).FirstOrDefault();
                if (tbl != null)
                {
                    _response.IsSuccess = false;
                    _response.Message = "Quotation is already generated for this work order";
                    return _response;
                }

                if (workOrderObj != null)
                {
                    // Header Detail
                    quotationObj.QuotationId = 0;
                    quotationObj.QuoteDate = DateTime.Now;
                    quotationObj.QuotationNumber = Utilities.QuotationNumberAutoGenerated();
                    quotationObj.WorkOrderId = workOrderObj.Id;
                    quotationObj.WorkOrderNumber = workOrderObj.WorkOrderNumber;
                    quotationObj.BranchId = workOrderObj.BranchId;
                    quotationObj.BranchName = workOrderObj.BranchName;
                    quotationObj.AmountBeforeTax = 0;
                    quotationObj.CGSTPerct = 0;
                    quotationObj.CGSTValue = 0;
                    quotationObj.SGSTPerct = 0;
                    quotationObj.SGSTValue = 0;
                    quotationObj.IGSTPerct = 0;
                    quotationObj.IGSTValue = 0;
                    quotationObj.TotalDiscAmt = 0;
                    quotationObj.GrossAmountIncludeTax = 0;
                    quotationObj.AdvanceReceived = 0;
                    quotationObj.AmountPaidAfter = 0;
                    quotationObj.OutstandingAmount = 0;
                    quotationObj.CreatedBy = 0;
                    quotationObj.CreatorName = string.Empty;
                    quotationObj.ModifyBy = 0;
                    quotationObj.ModifierName = string.Empty;

                    var vBranchObj = db.tblBranches.Where(w => w.Id == workOrderObj.BranchId).FirstOrDefault();
                    if (vBranchObj != null)
                    {
                        var vGSTMappingObj = db.tblGSTMappings.Where(w => w.CompanyId == vBranchObj.CompanyId && w.StateId == vBranchObj.StateId).FirstOrDefault();
                        if (vGSTMappingObj != null)
                        {
                            quotationObj.BranchAddress = vBranchObj.AddressLine1;
                            quotationObj.BranchGSTNumber = vGSTMappingObj.GST;
                        }

                        var vBranchStateObj = db.tblStates.Where(w => w.Id == vBranchObj.StateId).FirstOrDefault();
                        if (vBranchStateObj != null)
                        {
                            quotationObj.BranchStateCode = Convert.ToInt32(vBranchStateObj.StateCode);
                        }
                    }


                    // Customer Detail
                    var vWorkOrderCustomerObj = db.tblCustomers.Where(w => w.Id == workOrderObj.CustomerId).FirstOrDefault();
                    if (vWorkOrderCustomerObj != null)
                    {
                        quotationObj.customerDetails.CustomerId = workOrderObj.CustomerId;
                        //quotationObj.customerDetails.OrganizationName = workOrderObj.CompanyName;
                        quotationObj.customerDetails.OrganizationName = workOrderObj.OrganizationName;
                        quotationObj.customerDetails.CustomerName = vWorkOrderCustomerObj.FirstName + " " + vWorkOrderCustomerObj.LastName;
                        quotationObj.customerDetails.CustomerGstNumber = workOrderObj.GSTNumber;
                        quotationObj.customerDetails.CustomerMobile = vWorkOrderCustomerObj.Mobile;
                        quotationObj.customerDetails.CustomerEmail = vWorkOrderCustomerObj.Email;

                        var vWorkOrderCustomerAddressObj = db.tblPermanentAddresses.Where(w => w.Id == workOrderObj.ServiceAddressId).FirstOrDefault();
                        if (vWorkOrderCustomerAddressObj != null)
                        {
                            quotationObj.customerDetails.BillToAddress = vWorkOrderCustomerAddressObj.Address;
                            quotationObj.customerDetails.DeliverToAddress = vWorkOrderCustomerAddressObj.Address;
                        }

                        var vWorkOrderBranchObj = db.tblBranches.Where(w => w.Id == workOrderObj.BranchId).FirstOrDefault();
                        if (vWorkOrderBranchObj != null)
                        {
                            //var vGSTMappingObj = db.tblGSTMappings.Where(w => w.CompanyId == vWorkOrderBranchObj.CompanyId && w.StateId == vWorkOrderBranchObj.StateId && w.IsActive == true).FirstOrDefault();
                            //if (vGSTMappingObj != null)
                            //{
                            //    quotationObj.BranchGSTNumber = vGSTMappingObj.GST;
                            //}

                            var vWorkOrderStateObj = db.tblStates.Where(w => w.Id == vWorkOrderBranchObj.StateId).FirstOrDefault();
                            if (vWorkOrderStateObj != null)
                            {
                                quotationObj.customerDetails.CustomerStateCode = Convert.ToInt32(vWorkOrderStateObj.StateCode);
                                //quotationObj.BranchStateCode = Convert.ToInt32(vWorkOrderStateObj.StateCode);
                            }
                        }
                    }

                    // Product Detail
                    quotationObj.productDetails.ProductTypeId = workOrderObj.ProductTypeId;
                    quotationObj.productDetails.ProductType = workOrderObj.ProductType;
                    quotationObj.productDetails.ProductMakeId = workOrderObj.ProductMakeId;
                    quotationObj.productDetails.ProductMake = workOrderObj.ProductMake;
                    quotationObj.productDetails.ProductModelId = workOrderObj.ProductModelId;
                    quotationObj.productDetails.ProductModel = workOrderObj.ProductModel;
                    quotationObj.productDetails.ProdModelIfOther = workOrderObj.ProdModelIfOther;
                    quotationObj.productDetails.ProductDescriptionId = workOrderObj.ProductDescriptionId;
                    quotationObj.productDetails.ProductDescription = workOrderObj.ProductDescription;
                    quotationObj.productDetails.ProdDescriptionIfOther = workOrderObj.ProdDescriptionIfOther;
                    quotationObj.productDetails.ProductSerialNumber = workOrderObj.ProductSerialNumber;
                    quotationObj.productDetails.ProductNumber = workOrderObj.ProductNumber;

                    // Service Charge
                    quotationObj.serviceChargeDetails.ProductTypeId = 0;
                    quotationObj.serviceChargeDetails.ProductType = string.Empty;
                    quotationObj.serviceChargeDetails.HSNCodeId = 0;
                    quotationObj.serviceChargeDetails.HSNCode = string.Empty;
                    quotationObj.serviceChargeDetails.TravelRangeId = 0;
                    quotationObj.serviceChargeDetails.TravelRange = string.Empty;
                    quotationObj.serviceChargeDetails.Price = 0;
                    quotationObj.serviceChargeDetails.Description = "Service Charge";
                    quotationObj.serviceChargeDetails.DiscPerct = 0;
                    quotationObj.serviceChargeDetails.DiscValue = 0;
                    quotationObj.serviceChargeDetails.GSTType = "";
                    quotationObj.serviceChargeDetails.CGSTPerct = 0;
                    quotationObj.serviceChargeDetails.CGSTValue = 0;
                    quotationObj.serviceChargeDetails.SGSTPerct = 0;
                    quotationObj.serviceChargeDetails.SGSTValue = 0;
                    quotationObj.serviceChargeDetails.IGSTPerct = 0;
                    quotationObj.serviceChargeDetails.IGSTValue = 0;
                    quotationObj.serviceChargeDetails.PriceAfterDisc = 0;
                }

                _response.Data = quotationObj;
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        [Route("api/QuotationAPI/SaveQuotation")]
        public async Task<Response> SaveQuotation(Quotation request)
        {
            try
            {
                var tbl = db.tblQuotations.Where(x => x.Id == request.QuotationId).FirstOrDefault();
                if (tbl == null)
                {
                    // Header Detail
                    tbl = new tblQuotation();

                    tbl.QuoteDate = request.QuoteDate;
                    //check duplicate quotation
                    var dupQuotationNumber = db.tblQuotations.Where(x => x.QuotationNumber == request.QuotationNumber).FirstOrDefault();
                    if (dupQuotationNumber != null)
                    {
                        request.QuotationNumber = Utilities.QuotationNumberAutoGenerated();
                    }
                    tbl.QuotationNumber = request.QuotationNumber;
                    tbl.WorkOrderId = request.WorkOrderId;

                    tbl.AmountBeforeTax = request.AmountBeforeTax;
                    tbl.CGSTPerct = request.CGSTPerct;
                    tbl.CGSTValue = request.CGSTValue;
                    tbl.SGSTPerct = request.SGSTPerct;
                    tbl.SGSTValue = request.SGSTValue;
                    tbl.IGSTPerct = request.IGSTPerct;
                    tbl.IGSTValue = request.IGSTValue;

                    tbl.TotalDiscAmt = request.TotalDiscAmt;
                    tbl.GrossAmountIncludeTax = request.GrossAmountIncludeTax;
                    tbl.AdvanceReceived = 0;
                    tbl.AmountPaidAfter = 0;
                    tbl.OutstandingAmount = request.OutstandingAmount;
                    tbl.StatusId = 1;

                    tbl.CreatedBy = Utilities.GetUserID(ActionContext.Request);
                    tbl.CreatedDate = DateTime.Now;

                    db.tblQuotations.Add(tbl);
                    await db.SaveChangesAsync();

                    //Service Charge
                    if (request.serviceChargeDetails.ProductTypeId != null)
                    {
                        var vServiceCharge = new tblQuotationServiceChargeDetail()
                        {
                            QuotationId = tbl.Id,
                            ProductTypeId = request.serviceChargeDetails.ProductTypeId,
                            HSNCodeId = request.serviceChargeDetails.HSNCodeId,
                            TravelRangeId = request.serviceChargeDetails.TravelRangeId,
                            Price = request.serviceChargeDetails.Price,
                            Qty = request.serviceChargeDetails.Qty,
                            Description = request.serviceChargeDetails.Description,
                            DiscPerct = request.serviceChargeDetails.DiscPerct,
                            DiscValue = request.serviceChargeDetails.DiscValue,
                            GSTType = request.serviceChargeDetails.GSTType,
                            CGSTPerct = request.serviceChargeDetails.CGSTPerct,
                            CGSTValue = request.serviceChargeDetails.CGSTValue,
                            SGSTPerct = request.serviceChargeDetails.SGSTPerct,
                            SGSTValue = request.serviceChargeDetails.SGSTValue,
                            IGSTPerct = request.serviceChargeDetails.IGSTPerct,
                            IGSTValue = request.serviceChargeDetails.IGSTValue,
                            PriceAfterDisc = request.serviceChargeDetails.PriceAfterDisc,
                        };

                        db.tblQuotationServiceChargeDetails.Add(vServiceCharge);
                        await db.SaveChangesAsync();
                    }

                    //Part Details
                    foreach (var item in request.partDetails)
                    {
                        //int iPartId = item.PartId;

                        //// Save new part
                        //if (item.PartId == 0)
                        //{
                        //    var vWorkOrerObj = db.tblWorkOrders.Where(x => x.Id == tbl.WorkOrderId).FirstOrDefault();
                        //    var tblPartDetail = new tblPartDetail();
                        //    {
                        //        tblPartDetail.UniqueCode = Utilities.PartDetails_UniqueCodeAutoGenerated();
                        //        tblPartDetail.PartNumber = item.PartNumber;
                        //        tblPartDetail.PartDescription = item.PartDescription;
                        //        tblPartDetail.PartStatusId = 1; // Good Part
                        //        tblPartDetail.SalePrice = item.Price;
                        //        tblPartDetail.IsActive = true;
                        //        tblPartDetail.CompanyId = vWorkOrerObj != null ? vWorkOrerObj.CompanyId : 0;
                        //        tblPartDetail.BranchId = vWorkOrerObj != null ? vWorkOrerObj.BranchId : 0;
                        //        tblPartDetail.Quantity = 0;
                        //        tblPartDetail.CreatedBy = Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0);
                        //        tblPartDetail.CreatedDate = DateTime.Now;
                        //    }
                        //    db.tblPartDetails.AddOrUpdate(tblPartDetail);
                        //    db.SaveChanges();

                        //    iPartId = tblPartDetail.Id;
                        //}

                        // Save Quotation part
                        tblQuotationPartDetail vItem = new tblQuotationPartDetail()
                        {
                            QuotationId = tbl.Id,
                            PartId = item.PartId,
                            Qty = item.Qty,
                            Price = item.Price,
                            DiscPerct = item.DiscPerct,
                            DiscValue = item.DiscValue,
                            GSTType = item.GSTType,
                            CGSTPerct = item.CGSTPerct,
                            CGSTValue = item.CGSTValue,
                            SGSTPerct = item.SGSTPerct,
                            SGSTValue = item.SGSTValue,
                            IGSTPerct = item.IGSTPerct,
                            IGSTValue = item.IGSTValue,
                            PriceAfterDisc = item.PriceAfterDisc,
                            PartNumber = item.PartNumber,
                            PartDescription = item.PartDescription
                        };

                        db.tblQuotationPartDetails.Add(vItem);
                        db.SaveChanges();
                    }

                    #region Track Quotation Log

                    if (tbl.QuotationNumber != "")
                    {
                        CreateQuotationLog(tbl.QuotationNumber);
                    }

                    #endregion

                    _response.IsSuccess = true;
                    _response.Data = tbl.QuotationNumber;
                    _response.Message = "Quotation details saved successfully";
                }
                else
                {
                    tbl.QuoteDate = request.QuoteDate;
                    tbl.WorkOrderId = request.WorkOrderId;

                    tbl.AmountBeforeTax = request.AmountBeforeTax;
                    tbl.CGSTPerct = request.CGSTPerct;
                    tbl.CGSTValue = request.CGSTValue;
                    tbl.SGSTPerct = request.SGSTPerct;
                    tbl.SGSTValue = request.SGSTValue;
                    tbl.IGSTPerct = request.IGSTPerct;
                    tbl.IGSTValue = request.IGSTValue;

                    tbl.TotalDiscAmt = request.TotalDiscAmt;
                    tbl.GrossAmountIncludeTax = request.GrossAmountIncludeTax;
                    //tbl.AdvanceReceived = request.AdvanceReceived;
                    //tbl.AmountPaidAfter = request.AmountPaidAfter;
                    tbl.OutstandingAmount = request.OutstandingAmount;
                    //tbl.StatusId = request.StatusId;
                    tbl.StatusId = 1;

                    tbl.ModifiedBy = Utilities.GetUserID(ActionContext.Request);
                    tbl.ModifiedDate = DateTime.Now;

                    await db.SaveChangesAsync();

                    //delete prev service charge
                    var vServiceChargeObj = db.tblQuotationServiceChargeDetails.Where(x => x.QuotationId == tbl.Id).ToList();
                    foreach (var item in vServiceChargeObj)
                    {
                        db.tblQuotationServiceChargeDetails.Remove(item);
                        await db.SaveChangesAsync();
                    }

                    //Service Charge
                    if (request.serviceChargeDetails.ProductTypeId != null)
                    {
                        var vServiceCharge = new tblQuotationServiceChargeDetail()
                        {
                            QuotationId = tbl.Id,
                            ProductTypeId = request.serviceChargeDetails.ProductTypeId,
                            HSNCodeId = request.serviceChargeDetails.HSNCodeId,
                            TravelRangeId = request.serviceChargeDetails.TravelRangeId,
                            Price = request.serviceChargeDetails.Price,
                            Qty = request.serviceChargeDetails.Qty,
                            Description = request.serviceChargeDetails.Description,
                            DiscPerct = request.serviceChargeDetails.DiscPerct,
                            DiscValue = request.serviceChargeDetails.DiscValue,
                            GSTType = request.serviceChargeDetails.GSTType,
                            CGSTPerct = request.serviceChargeDetails.CGSTPerct,
                            CGSTValue = request.serviceChargeDetails.CGSTValue,
                            SGSTPerct = request.serviceChargeDetails.SGSTPerct,
                            SGSTValue = request.serviceChargeDetails.SGSTValue,
                            IGSTPerct = request.serviceChargeDetails.IGSTPerct,
                            IGSTValue = request.serviceChargeDetails.IGSTValue,
                            PriceAfterDisc = request.serviceChargeDetails.PriceAfterDisc,
                        };

                        db.tblQuotationServiceChargeDetails.Add(vServiceCharge);
                        await db.SaveChangesAsync();
                    }

                    //delete prev quotation part details
                    var vQuotationPartDetails = db.tblQuotationPartDetails.Where(x => x.QuotationId == tbl.Id).ToList();
                    foreach (var item in vQuotationPartDetails)
                    {
                        db.tblQuotationPartDetails.Remove(item);
                        await db.SaveChangesAsync();
                    }

                    //Part Details
                    foreach (var item in request.partDetails)
                    {
                        //int iPartId = item.PartId;

                        //// Save new part
                        //if (item.PartId == 0)
                        //{
                        //    var vWorkOrerObj = db.tblWorkOrders.Where(x => x.Id == tbl.WorkOrderId).FirstOrDefault();
                        //    var tblPartDetail = new tblPartDetail();
                        //    {
                        //        tblPartDetail.UniqueCode = Utilities.PartDetails_UniqueCodeAutoGenerated();
                        //        tblPartDetail.PartNumber = item.PartNumber;
                        //        tblPartDetail.PartDescription = item.PartDescription;
                        //        tblPartDetail.PartStatusId = 1; // Good Part
                        //        tblPartDetail.SalePrice = item.Price;
                        //        tblPartDetail.IsActive = true;
                        //        tblPartDetail.CompanyId = vWorkOrerObj != null ? vWorkOrerObj.CompanyId : 0;
                        //        tblPartDetail.BranchId = vWorkOrerObj != null ? vWorkOrerObj.BranchId : 0;
                        //        tblPartDetail.Quantity = 0;
                        //        tblPartDetail.CreatedBy = Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0);
                        //        tblPartDetail.CreatedDate = DateTime.Now;
                        //    }
                        //    db.tblPartDetails.AddOrUpdate(tblPartDetail);
                        //    db.SaveChanges();

                        //    iPartId = tblPartDetail.Id;
                        //}

                        // Save Quotation part
                        tblQuotationPartDetail vItem = new tblQuotationPartDetail()
                        {
                            QuotationId = tbl.Id,
                            PartId = item.PartId,
                            Qty = item.Qty,
                            Price = item.Price,
                            DiscPerct = item.DiscPerct,
                            DiscValue = item.DiscValue,
                            GSTType = item.GSTType,
                            CGSTPerct = item.CGSTPerct,
                            CGSTValue = item.CGSTValue,
                            SGSTPerct = item.SGSTPerct,
                            SGSTValue = item.SGSTValue,
                            IGSTPerct = item.IGSTPerct,
                            IGSTValue = item.IGSTValue,
                            PriceAfterDisc = item.PriceAfterDisc,
                            PartNumber = item.PartNumber,
                            PartDescription = item.PartDescription
                        };

                        db.tblQuotationPartDetails.Add(vItem);
                        db.SaveChanges();
                    }

                    #region Track Quotation Log

                    if (tbl.QuotationNumber != "")
                    {
                        CreateQuotationLog(tbl.QuotationNumber);
                    }

                    #endregion

                    _response.IsSuccess = true;
                    _response.Data = tbl.QuotationNumber;
                    _response.Message = "Quotation details updated successfully";
                }

                #region Track Order Log

                if (tbl != null)
                {
                    trackingModuleLog = new TrackingModuleLog();
                    trackingModuleLog.TrackOrderLog("WO", tbl.WorkOrderId, Convert.ToInt32(WorkOrderTrackingStatus.QuatationInitiated), Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0));
                }

                #endregion

                #region Log Details
                if (tbl != null)
                {
                    string logDesc = string.Empty;
                    if (request.QuotationId == 0)
                    {
                        logDesc = "Generate Quotation";
                    }
                    else if (request.QuotationId > 0)
                    {
                        logDesc = "Quotation Edit or Update";
                    }

                    await Task.Run(() => db.SaveLogDetails("Work Order", tbl.WorkOrderId, logDesc, "", Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0)).ToList());
                }
                #endregion
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        [Route("api/QuotationAPI/QuotationList")]
        public async Task<Response> QuotationList(QuotationSearchParameters parameters)
        {
            List<GetQuotationList_Result> quotationList_Result = new List<GetQuotationList_Result>();

            try
            {
                var vTotal = new ObjectParameter("Total", typeof(int));
                var userId = Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0);

                quotationList_Result = await Task.Run(() => db.GetQuotationList(parameters.CompanyId, parameters.BranchId, parameters.QuotationNumber, parameters.WorkOrderNumber, parameters.StatusId, parameters.SearchValue, parameters.PageSize, parameters.PageNo, vTotal, userId).ToList());

                _response.TotalCount = Convert.ToInt32(vTotal.Value);
                _response.Data = quotationList_Result;
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        [Route("api/QuotationAPI/GetQuotationDetail")]
        public Response GetQuotationDetail(string QuotationNumber)
        {
            Quotation quotationObj = new Quotation();

            try
            {
                var vQuotationObj = db.tblQuotations.Where(x => x.QuotationNumber == QuotationNumber).FirstOrDefault();
                if (vQuotationObj != null)
                {
                    var vWorkOrderObj = db.tblWorkOrders.Where(x => x.Id == vQuotationObj.WorkOrderId).FirstOrDefault();
                    if (vWorkOrderObj != null)
                    {
                        var workOrderObj = db.GetWorkOrderDetails(vWorkOrderObj.WorkOrderNumber).FirstOrDefault();
                        if (workOrderObj != null)
                        {
                            // Header Detail
                            quotationObj.QuotationId = vQuotationObj.Id;
                            quotationObj.QuoteDate = vQuotationObj.QuoteDate;
                            quotationObj.QuotationNumber = vQuotationObj.QuotationNumber;
                            quotationObj.WorkOrderId = workOrderObj.Id;
                            quotationObj.WorkOrderNumber = workOrderObj.WorkOrderNumber;
                            quotationObj.BranchId = workOrderObj.BranchId;
                            quotationObj.BranchName = workOrderObj.BranchName;

                            var vBranchObj = db.tblBranches.Where(w => w.Id == workOrderObj.BranchId).FirstOrDefault();
                            if (vBranchObj != null)
                            {
                                // Branch Address
                                var vTotal = new ObjectParameter("Total", typeof(int));
                                var objtblBranch = db.GetBranchList(0, vBranchObj.Id.ToString(), "", 0, 0, vTotal, 0).ToList().FirstOrDefault();


                                var vGSTMappingObj = db.tblGSTMappings.Where(w => w.CompanyId == vBranchObj.CompanyId && w.StateId == vBranchObj.StateId).FirstOrDefault();
                                if (vGSTMappingObj != null)
                                {
                                    if (objtblBranch != null)
                                    {
                                        quotationObj.BranchAddress = objtblBranch.AddressLine1 + ", " + objtblBranch.StateName + ", " + objtblBranch.CityName + ", " + objtblBranch.AreaName + ", " + objtblBranch.Pincode;
                                    }

                                    quotationObj.BranchGSTNumber = vGSTMappingObj.GST;
                                }

                                var vBranchStateObj = db.tblStates.Where(w => w.Id == vBranchObj.StateId).FirstOrDefault();
                                if (vBranchStateObj != null)
                                {
                                    quotationObj.BranchStateCode = Convert.ToInt32(vBranchStateObj.StateCode);
                                }
                            }

                            quotationObj.AmountBeforeTax = vQuotationObj.AmountBeforeTax;
                            quotationObj.CGSTPerct = vQuotationObj.CGSTPerct;
                            quotationObj.CGSTValue = vQuotationObj.CGSTValue;
                            quotationObj.SGSTPerct = vQuotationObj.SGSTPerct;
                            quotationObj.SGSTValue = vQuotationObj.SGSTValue;
                            quotationObj.IGSTPerct = vQuotationObj.IGSTPerct;
                            quotationObj.IGSTValue = vQuotationObj.IGSTValue;
                            quotationObj.TotalDiscAmt = vQuotationObj.TotalDiscAmt;
                            quotationObj.GrossAmountIncludeTax = vQuotationObj.GrossAmountIncludeTax;
                            quotationObj.AdvanceReceived = vQuotationObj.AdvanceReceived;
                            quotationObj.AmountPaidAfter = vQuotationObj.AmountPaidAfter;
                            quotationObj.OutstandingAmount = vQuotationObj.OutstandingAmount;
                            quotationObj.CreatedBy = vQuotationObj.CreatedBy;
                            quotationObj.ModifyBy = vQuotationObj.ModifiedBy;
                            quotationObj.StatusId = vQuotationObj.StatusId;

                            quotationObj.PaymentStatus = vQuotationObj.OutstandingAmount == 0 ? "Payment Completed" :
                            (Convert.ToDecimal(vQuotationObj.GrossAmountIncludeTax) != Convert.ToDecimal(vQuotationObj.OutstandingAmount)) ? "Partial Payment Received" :
                            (Convert.ToDecimal(vQuotationObj.GrossAmountIncludeTax) == Convert.ToDecimal(vQuotationObj.OutstandingAmount)) ? "Payment not initiated" : string.Empty;


                            var userCreatorObj = db.tblUsers.Where(x => x.Id == vQuotationObj.CreatedBy).FirstOrDefault();
                            if (userCreatorObj != null)
                            {
                                quotationObj.CreatorName = db.tblEmployees.Where(x => x.Id == userCreatorObj.EmployeeId).Select(x => x.EmployeeName).FirstOrDefault();
                            }

                            var userModifiedObj = db.tblUsers.Where(x => x.Id == vQuotationObj.ModifiedBy).FirstOrDefault();
                            if (userModifiedObj != null)
                            {
                                quotationObj.ModifierName = db.tblEmployees.Where(x => x.Id == userModifiedObj.EmployeeId).Select(x => x.EmployeeName).FirstOrDefault();
                            }

                            var vtblStatusMastersObj = db.tblStatusMasters.Where(x => x.StatusId == vQuotationObj.StatusId).FirstOrDefault();
                            if (vtblStatusMastersObj != null)
                            {
                                quotationObj.StatusName = vtblStatusMastersObj.StatusName;
                            }


                            // Customer Detail
                            var vWorkOrderCustomerObj = db.tblCustomers.Where(w => w.Id == workOrderObj.CustomerId).FirstOrDefault();
                            if (vWorkOrderCustomerObj != null)
                            {
                                quotationObj.customerDetails.CustomerId = workOrderObj.CustomerId;
                                quotationObj.customerDetails.OrganizationName = workOrderObj.OrganizationName;
                                quotationObj.customerDetails.CustomerName = vWorkOrderCustomerObj.FirstName + " " + vWorkOrderCustomerObj.LastName;
                                quotationObj.customerDetails.CustomerGstNumber = workOrderObj.GSTNumber;
                                quotationObj.customerDetails.CustomerMobile = vWorkOrderCustomerObj.Mobile;
                                quotationObj.customerDetails.CustomerEmail = vWorkOrderCustomerObj.Email;

                                var vUserObj = db.tblUsers.Where(u => u.CustomerId == workOrderObj.CustomerId).FirstOrDefault();
                                var vBillToAddresses = db.GetUsersAddresses(vUserObj.Id).ToList().Where(x => x.IsDefault == true).FirstOrDefault();
                                if (vBillToAddresses != null)
                                {
                                    quotationObj.customerDetails.BillToAddress = vBillToAddresses.Address + ", " + vBillToAddresses.StateName + ", " + vBillToAddresses.CityName + ", " + vBillToAddresses.AreaName + ", " + vBillToAddresses.Pincode;
                                }

                                var vDeliverToAddress = db.GetUsersAddresses(vUserObj.Id).ToList().Where(x => x.Id == workOrderObj.ServiceAddressId).FirstOrDefault();
                                if (vDeliverToAddress != null)
                                {
                                    quotationObj.customerDetails.DeliverToAddress = vDeliverToAddress.Address + ", " + vDeliverToAddress.StateName + ", " + vDeliverToAddress.CityName + ", " + vDeliverToAddress.AreaName + ", " + vDeliverToAddress.Pincode;
                                }

                                //var vWorkOrderCustomerAddressObj = db.tblPermanentAddresses.Where(w => w.Id == workOrderObj.ServiceAddressId).FirstOrDefault();
                                //if (vWorkOrderCustomerAddressObj != null)
                                //{
                                //    quotationObj.customerDetails.BillToAddress = vWorkOrderCustomerAddressObj.Address;
                                //    quotationObj.customerDetails.DeliverToAddress = vWorkOrderCustomerAddressObj.Address;
                                //}

                                var vWorkOrderBranchObj = db.tblBranches.Where(w => w.Id == workOrderObj.BranchId).FirstOrDefault();
                                if (vWorkOrderBranchObj != null)
                                {
                                    var vWorkOrderStateObj = db.tblStates.Where(w => w.Id == vWorkOrderBranchObj.StateId).FirstOrDefault();
                                    if (vWorkOrderStateObj != null)
                                    {
                                        quotationObj.customerDetails.CustomerStateCode = Convert.ToInt32(vWorkOrderStateObj.StateCode);
                                    }
                                }
                            }

                            // Product Detail
                            quotationObj.productDetails.ProductTypeId = workOrderObj.ProductTypeId;
                            quotationObj.productDetails.ProductType = workOrderObj.ProductType;
                            quotationObj.productDetails.ProductMakeId = workOrderObj.ProductMakeId;
                            quotationObj.productDetails.ProductMake = workOrderObj.ProductMake;
                            quotationObj.productDetails.ProductModelId = workOrderObj.ProductModelId;
                            quotationObj.productDetails.ProductModel = workOrderObj.ProductModel;
                            quotationObj.productDetails.ProdModelIfOther = workOrderObj.ProdModelIfOther;
                            quotationObj.productDetails.ProductDescriptionId = workOrderObj.ProductDescriptionId;
                            quotationObj.productDetails.ProductDescription = workOrderObj.ProductDescription;
                            quotationObj.productDetails.ProdDescriptionIfOther = workOrderObj.ProdDescriptionIfOther;
                            quotationObj.productDetails.ProductSerialNumber = workOrderObj.ProductSerialNumber;
                            quotationObj.productDetails.ProductNumber = workOrderObj.ProductNumber;

                            // Service Charge
                            var serviceChargeObj = db.tblQuotationServiceChargeDetails.Where(x => x.QuotationId == vQuotationObj.Id).FirstOrDefault();
                            if (serviceChargeObj != null)
                            {
                                quotationObj.serviceChargeDetails.ProductTypeId = serviceChargeObj.ProductTypeId;
                                quotationObj.serviceChargeDetails.ProductType = db.tblProductTypes.Where(x => x.Id == serviceChargeObj.ProductTypeId).Select(x => x.ProductType).FirstOrDefault();
                                quotationObj.serviceChargeDetails.HSNCodeId = serviceChargeObj.HSNCodeId;
                                quotationObj.serviceChargeDetails.HSNCode = db.tblHSNCodeGSTMappings.Where(x => x.Id == serviceChargeObj.HSNCodeId).Select(x => x.HSNCode).FirstOrDefault();
                                quotationObj.serviceChargeDetails.TravelRangeId = serviceChargeObj.TravelRangeId;
                                quotationObj.serviceChargeDetails.TravelRange = db.tblTravelRanges.Where(x => x.Id == serviceChargeObj.TravelRangeId).Select(x => x.TravelRange).FirstOrDefault();
                                quotationObj.serviceChargeDetails.Price = serviceChargeObj.Price;
                                quotationObj.serviceChargeDetails.Description = serviceChargeObj.Description;
                                quotationObj.serviceChargeDetails.DiscPerct = serviceChargeObj.DiscPerct;
                                quotationObj.serviceChargeDetails.DiscValue = serviceChargeObj.DiscValue;
                                quotationObj.serviceChargeDetails.GSTType = serviceChargeObj.GSTType;
                                quotationObj.serviceChargeDetails.CGSTPerct = serviceChargeObj.CGSTPerct;
                                quotationObj.serviceChargeDetails.CGSTValue = serviceChargeObj.CGSTValue;
                                quotationObj.serviceChargeDetails.SGSTPerct = serviceChargeObj.SGSTPerct;
                                quotationObj.serviceChargeDetails.SGSTValue = serviceChargeObj.SGSTValue;
                                quotationObj.serviceChargeDetails.IGSTPerct = serviceChargeObj.IGSTPerct;
                                quotationObj.serviceChargeDetails.IGSTValue = serviceChargeObj.IGSTValue;
                                quotationObj.serviceChargeDetails.PriceAfterDisc = serviceChargeObj.PriceAfterDisc;
                            }

                            // Part Details
                            var quotationPartObj = db.tblQuotationPartDetails.Where(x => x.QuotationId == vQuotationObj.Id).ToList();
                            foreach (var itemWOPart in quotationPartObj)
                            {
                                string sPartNumber = "";
                                string sPartDescription = "";
                                int sHSNCodeId = 0;
                                string sHSNCode = "";

                                if (itemWOPart.PartId == 0)
                                {
                                    sPartNumber = itemWOPart.PartNumber;
                                    sPartDescription = itemWOPart.PartDescription;

                                    quotationObj.partDetails.Add(new PartDetails
                                    {
                                        PartId = 0,
                                        PartNumber = sPartNumber,
                                        HSNCodeId = sHSNCodeId,
                                        HSNCode = sHSNCode,
                                        PartDescription = sPartDescription,
                                        Qty = itemWOPart.Qty,
                                        Price = itemWOPart.Price,
                                        DiscPerct = itemWOPart.DiscPerct,
                                        DiscValue = itemWOPart.DiscValue,
                                        GSTType = itemWOPart.GSTType,
                                        CGSTPerct = itemWOPart.CGSTPerct,
                                        CGSTValue = itemWOPart.CGSTValue,
                                        SGSTPerct = itemWOPart.SGSTPerct,
                                        SGSTValue = itemWOPart.SGSTValue,
                                        IGSTPerct = itemWOPart.IGSTPerct,
                                        IGSTValue = itemWOPart.IGSTValue,
                                        PriceAfterDisc = itemWOPart.PriceAfterDisc,
                                    });
                                }
                                else
                                {
                                    var vPartObj = db.tblPartDetails.Where(x => x.Id == itemWOPart.PartId).FirstOrDefault();
                                    if (vPartObj != null)
                                    {
                                        var objHSN = db.tblHSNCodeGSTMappings.Where(x => x.Id == vPartObj.HSNCodeId).FirstOrDefault();
                                        if (objHSN != null)
                                        {
                                            sHSNCodeId = objHSN.Id;
                                            sHSNCode = objHSN.HSNCode;
                                        }

                                        sPartNumber = vPartObj.PartNumber;
                                        sPartDescription = vPartObj.PartDescription;

                                        quotationObj.partDetails.Add(new PartDetails
                                        {
                                            PartId = vPartObj.Id,
                                            PartNumber = sPartNumber,
                                            HSNCodeId = sHSNCodeId,
                                            HSNCode = sHSNCode,
                                            PartDescription = sPartDescription,
                                            Qty = itemWOPart.Qty,
                                            Price = itemWOPart.Price,
                                            DiscPerct = itemWOPart.DiscPerct,
                                            DiscValue = itemWOPart.DiscValue,
                                            GSTType = itemWOPart.GSTType,
                                            CGSTPerct = itemWOPart.CGSTPerct,
                                            CGSTValue = itemWOPart.CGSTValue,
                                            SGSTPerct = itemWOPart.SGSTPerct,
                                            SGSTValue = itemWOPart.SGSTValue,
                                            IGSTPerct = itemWOPart.IGSTPerct,
                                            IGSTValue = itemWOPart.IGSTValue,
                                            PriceAfterDisc = itemWOPart.PriceAfterDisc,
                                        });
                                    }
                                }
                            }
                        }
                    }
                }

                _response.Data = quotationObj;
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [Route("api/QuotationAPI/QuotationAcceptNReject")]
        public async Task<Response> QuotationAcceptNReject(QuotationAcceptNReject parameters)
        {
            try
            {
                var vWorkOrderStatusObj = await db.tblQuotations.Where(w => w.QuotationNumber == parameters.QuotationNumber).FirstOrDefaultAsync();
                if (vWorkOrderStatusObj != null)
                {
                    var vWorkOrderObj = await db.tblWorkOrders.Where(w => w.Id == vWorkOrderStatusObj.WorkOrderId).FirstOrDefaultAsync();

                    if (parameters.StatusId > 0)
                    {
                        vWorkOrderStatusObj.StatusId = parameters.StatusId;
                        vWorkOrderStatusObj.Reason = parameters.Reason;

                        await db.SaveChangesAsync();

                        #region Track Order Log

                        if (parameters.StatusId == 2)
                        {
                            trackingModuleLog = new TrackingModuleLog();
                            trackingModuleLog.TrackOrderLog("WO", vWorkOrderStatusObj.WorkOrderId, Convert.ToInt32(WorkOrderTrackingStatus.QuatationApproval), Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0));
                        }

                        #endregion

                        #region Save Notification

                        // Accept
                        if (parameters.StatusId == 2)
                        {
                            string NotifyMessage = String.Format(@"Hi Team,
                                                               Greeting...                                                    
                                                               Quotation has been Accepted by Customer.");

                            // Accountant
                            var vRoleObj_Logistics = await db.tblRoles.Where(w => w.RoleName == "Accountant").FirstOrDefaultAsync();
                            if (vRoleObj_Logistics != null)
                            {
                                var vBranchWiseEmployeeList = await db.tblBranchMappings.Where(x => x.BranchId == vWorkOrderObj.BranchId).Select(x => x.EmployeeId).ToListAsync();
                                var vEmployeeList = await db.tblEmployees.Where(w => w.RoleId == vRoleObj_Logistics.Id && w.CompanyId == vWorkOrderObj.CompanyId && vBranchWiseEmployeeList.Contains(w.Id)).ToListAsync();

                                foreach (var itemEmployee in vEmployeeList)
                                {
                                    var vNotifyObj_Employee = new tblNotification()
                                    {
                                        Subject = "Customer Accept Quotation",
                                        SendTo = "Accountant & Backend Executive",
                                        //CustomerId = vWorkOrderStatusObj.CustomerId,
                                        //CustomerMessage = NotifyMessage_Customer,
                                        EmployeeId = itemEmployee.Id,
                                        EmployeeMessage = NotifyMessage,
                                        RefValue1 = parameters.QuotationNumber,
                                        CreatedBy = Utilities.GetUserID(ActionContext.Request),
                                        CreatedOn = DateTime.Now,
                                    };

                                    db.tblNotifications.Add(vNotifyObj_Employee);
                                }
                            }

                            // Backend Executive
                            var vRoleObj_Backend = await db.tblRoles.Where(w => w.RoleName == "Backend Executive").FirstOrDefaultAsync();
                            if (vRoleObj_Backend != null)
                            {
                                var vBranchWiseEmployeeList = await db.tblBranchMappings.Where(x => x.BranchId == vWorkOrderObj.BranchId).Select(x => x.EmployeeId).ToListAsync();
                                var vEmployeeList = await db.tblEmployees.Where(w => w.RoleId == vRoleObj_Backend.Id && w.CompanyId == vWorkOrderObj.CompanyId && vBranchWiseEmployeeList.Contains(w.Id)).ToListAsync();

                                foreach (var itemEmployee in vEmployeeList)
                                {
                                    var vNotifyObj_Employee = new tblNotification()
                                    {
                                        Subject = "Customer Accept Quotation",
                                        SendTo = "Accountant & Backend Executive",
                                        //CustomerId = vWorkOrderStatusObj.CustomerId,
                                        //CustomerMessage = NotifyMessage_Customer,
                                        EmployeeId = itemEmployee.Id,
                                        EmployeeMessage = NotifyMessage,
                                        RefValue1 = parameters.QuotationNumber,
                                        CreatedBy = Utilities.GetUserID(ActionContext.Request),
                                        CreatedOn = DateTime.Now,
                                    };

                                    db.tblNotifications.Add(vNotifyObj_Employee);
                                }
                            }

                            await db.SaveChangesAsync();
                        }

                        // Rejected
                        if (parameters.StatusId == 3)
                        {
                            string NotifyMessage = String.Format(@"Hi Team,
                                                               Greeting...                                                    
                                                               Quotation has been Rejected by Customer.");

                            // Backend Executive
                            var vRoleObj_Backend = await db.tblRoles.Where(w => w.RoleName == "Backend Executive").FirstOrDefaultAsync();
                            if (vRoleObj_Backend != null)
                            {
                                var vBranchWiseEmployeeList = await db.tblBranchMappings.Where(x => x.BranchId == vWorkOrderObj.BranchId).Select(x => x.EmployeeId).ToListAsync();
                                var vEmployeeList = await db.tblEmployees.Where(w => w.RoleId == vRoleObj_Backend.Id && w.CompanyId == vWorkOrderObj.CompanyId && vBranchWiseEmployeeList.Contains(w.Id)).ToListAsync();

                                foreach (var itemEmployee in vEmployeeList)
                                {
                                    var vNotifyObj_Employee = new tblNotification()
                                    {
                                        Subject = "Customer Reject Quotation",
                                        SendTo = "Backend Executive",
                                        //CustomerId = vWorkOrderStatusObj.CustomerId,
                                        //CustomerMessage = NotifyMessage_Customer,
                                        EmployeeId = itemEmployee.Id,
                                        EmployeeMessage = NotifyMessage,
                                        RefValue1 = parameters.QuotationNumber,
                                        CreatedBy = Utilities.GetUserID(ActionContext.Request),
                                        CreatedOn = DateTime.Now,
                                    };

                                    db.tblNotifications.Add(vNotifyObj_Employee);
                                }
                            }

                            await db.SaveChangesAsync();
                        }

                        #endregion

                        #region Log Details
                        if (parameters.StatusId > 1)
                        {
                            string logDesc = string.Empty;
                            if (parameters.StatusId == 2)
                            {
                                logDesc = "Quotation Status Accepted";
                            }
                            else if (parameters.StatusId == 3)
                            {
                                logDesc = "Quotation Status Rejected";
                            }

                            await Task.Run(() => db.SaveLogDetails("Work Order", vWorkOrderStatusObj.WorkOrderId, logDesc, parameters.Reason, Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0)).ToList());
                        }
                        #endregion

                        #region Email Sending
                        if (parameters.StatusId > 1)
                        {
                            await new AlertsSender().SendEmailCustomerQuotationAcceptReject(parameters);
                        }
                        #endregion

                        _response.Message = $"updated";
                    }
                }
                if (_response.Message != null && _response.Message.Length > 0)
                    _response.Message = $"Quotation details updated successfully";
                else
                    _response.Message = $"Quotation details not updated successfully";
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        [Route("api/QuotationAPI/DeleteQuotationPartDetail")]
        public Response DeleteQuotationPartDetail(string QuotationNumber, int PartId)
        {
            try
            {
                var vQuotationObj = db.tblQuotations.Where(x => x.QuotationNumber == QuotationNumber).FirstOrDefault();
                if (vQuotationObj != null)
                {
                    var vQuotationPartDetailsObj = db.tblQuotationPartDetails.Where(x => x.QuotationId == vQuotationObj.Id && x.PartId == PartId).FirstOrDefault();
                    if (vQuotationPartDetailsObj != null)
                    {
                        db.tblQuotationPartDetails.Remove(vQuotationPartDetailsObj);

                        db.SaveChanges();

                        _response.IsSuccess = true;
                        _response.Message = "Quotation deleted successfully";
                    }
                    else
                    {
                        _response.Message = "Something went wrong!, please try again later.";
                    }
                }
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        public string CreateQuotationLog(string QuotationNumber)
        {
            try
            {
                if (QuotationNumber != "")
                {
                    #region Header Details

                    tblQuotationLog tbl = new tblQuotationLog();
                    var vQuotation = db.tblQuotations.Where(x => x.QuotationNumber == QuotationNumber).FirstOrDefault();
                    if (vQuotation != null)
                    {
                        tbl = new tblQuotationLog();
                        tbl.QuoteDate = vQuotation.QuoteDate;
                        tbl.QuotationId = vQuotation.Id;

                        tbl.AmountBeforeTax = vQuotation.AmountBeforeTax;
                        tbl.CGSTPerct = vQuotation.CGSTPerct;
                        tbl.CGSTValue = vQuotation.CGSTValue;
                        tbl.SGSTPerct = vQuotation.SGSTPerct;
                        tbl.SGSTValue = vQuotation.SGSTValue;
                        tbl.IGSTPerct = vQuotation.IGSTPerct;
                        tbl.IGSTValue = vQuotation.IGSTValue;

                        tbl.TotalDiscAmt = vQuotation.TotalDiscAmt;
                        tbl.GrossAmountIncludeTax = vQuotation.GrossAmountIncludeTax;
                        tbl.AdvanceReceived = vQuotation.AdvanceReceived;
                        tbl.AmountPaidAfter = vQuotation.AmountPaidAfter;
                        tbl.OutstandingAmount = vQuotation.OutstandingAmount;
                        tbl.StatusId = vQuotation.StatusId;

                        tbl.CreatedBy = Utilities.GetUserID(ActionContext.Request);
                        tbl.CreatedDate = DateTime.Now;

                        db.tblQuotationLogs.Add(tbl);
                        db.SaveChanges();

                        #region Service Charge
                        var vServiceChargeDetails = db.tblQuotationServiceChargeDetails.Where(x => x.QuotationId == vQuotation.Id).FirstOrDefault();
                        if (vServiceChargeDetails != null)
                        {
                            var vServiceCharge = new tblQuotationServiceChargeDetailsLog()
                            {
                                QuotationLogId = tbl.Id,
                                ProductTypeId = vServiceChargeDetails.ProductTypeId,
                                HSNCodeId = vServiceChargeDetails.HSNCodeId,
                                TravelRangeId = vServiceChargeDetails.TravelRangeId,
                                Price = vServiceChargeDetails.Price,
                                Qty = vServiceChargeDetails.Qty,
                                Description = vServiceChargeDetails.Description,
                                DiscPerct = vServiceChargeDetails.DiscPerct,
                                DiscValue = vServiceChargeDetails.DiscValue,
                                GSTType = vServiceChargeDetails.GSTType,
                                CGSTPerct = vServiceChargeDetails.CGSTPerct,
                                CGSTValue = vServiceChargeDetails.CGSTValue,
                                SGSTPerct = vServiceChargeDetails.SGSTPerct,
                                SGSTValue = vServiceChargeDetails.SGSTValue,
                                IGSTPerct = vServiceChargeDetails.IGSTPerct,
                                IGSTValue = vServiceChargeDetails.IGSTValue,
                                PriceAfterDisc = vServiceChargeDetails.PriceAfterDisc,
                            };

                            db.tblQuotationServiceChargeDetailsLogs.Add(vServiceCharge);
                            db.SaveChanges();
                        }
                        #endregion

                        #region Part Details
                        var vpartDetails = db.tblQuotationPartDetails.Where(x => x.QuotationId == vQuotation.Id).ToList();
                        foreach (var item in vpartDetails)
                        {
                            var vItem = new tblQuotationPartDetailsLog()
                            {
                                QuotationLogId = tbl.Id,
                                PartId = item.PartId,
                                Qty = item.Qty,
                                Price = item.Price,
                                DiscPerct = item.DiscPerct,
                                DiscValue = item.DiscValue,
                                GSTType = item.GSTType,
                                CGSTPerct = item.CGSTPerct,
                                CGSTValue = item.CGSTValue,
                                SGSTPerct = item.SGSTPerct,
                                SGSTValue = item.SGSTValue,
                                IGSTPerct = item.IGSTPerct,
                                IGSTValue = item.IGSTValue,
                                PriceAfterDisc = item.PriceAfterDisc,
                                PartNumber = item.PartNumber,
                                PartDescription = item.PartDescription
                            };

                            db.tblQuotationPartDetailsLogs.Add(vItem);

                            db.SaveChanges();
                        }
                        #endregion
                    }

                    #endregion
                }
            }
            catch (Exception ex)
            {
                LogWriter.WriteLog(ex);
            }
            return "";
        }

        [HttpPost]
        [Route("api/QuotationAPI/GetQuotationLogList")]
        public Response GetQuotationLogList(string QuotationNumber)
        {
            List<Quotation> quotationObjList = new List<Quotation>();

            try
            {
                var vQuotationObj = db.tblQuotations.Where(x => x.QuotationNumber == QuotationNumber).FirstOrDefault();
                if (vQuotationObj != null)
                {
                    var vQuotationLogsObj = db.tblQuotationLogs.Where(x => x.QuotationId == vQuotationObj.Id).ToList();
                    foreach (var item in vQuotationLogsObj)
                    {
                        var vquotationNewObj = new Quotation();

                        var vWorkOrderObj = db.tblWorkOrders.Where(x => x.Id == vQuotationObj.WorkOrderId).FirstOrDefault();
                        if (vWorkOrderObj != null)
                        {
                            var workOrderObj = db.GetWorkOrderDetails(vWorkOrderObj.WorkOrderNumber).FirstOrDefault();
                            if (workOrderObj != null)
                            {
                                // Header Detail
                                vquotationNewObj.QuotationId = item.Id;
                                vquotationNewObj.QuoteDate = item.QuoteDate;
                                vquotationNewObj.QuotationNumber = vQuotationObj.QuotationNumber;
                                vquotationNewObj.WorkOrderId = workOrderObj.Id;
                                vquotationNewObj.WorkOrderNumber = workOrderObj.WorkOrderNumber;
                                vquotationNewObj.BranchId = workOrderObj.BranchId;
                                vquotationNewObj.BranchName = workOrderObj.BranchName;
                                vquotationNewObj.AmountBeforeTax = item.AmountBeforeTax;
                                vquotationNewObj.CGSTPerct = item.CGSTPerct;
                                vquotationNewObj.CGSTValue = item.CGSTValue;
                                vquotationNewObj.SGSTPerct = item.SGSTPerct;
                                vquotationNewObj.SGSTValue = item.SGSTValue;
                                vquotationNewObj.IGSTPerct = item.IGSTPerct;
                                vquotationNewObj.IGSTValue = item.IGSTValue;
                                vquotationNewObj.TotalDiscAmt = item.TotalDiscAmt;
                                vquotationNewObj.GrossAmountIncludeTax = item.GrossAmountIncludeTax;
                                vquotationNewObj.AdvanceReceived = item.AdvanceReceived;
                                vquotationNewObj.AmountPaidAfter = item.AmountPaidAfter;
                                vquotationNewObj.OutstandingAmount = item.OutstandingAmount;
                                vquotationNewObj.CreatedBy = item.CreatedBy;
                                vquotationNewObj.ModifyBy = item.ModifiedBy; ;

                                var userCreatorObj = db.tblUsers.Where(x => x.Id == item.CreatedBy).FirstOrDefault();
                                if (userCreatorObj != null)
                                {
                                    vquotationNewObj.CreatorName = db.tblEmployees.Where(x => x.Id == userCreatorObj.EmployeeId).Select(x => x.EmployeeName).FirstOrDefault();
                                }

                                var userModifiedObj = db.tblUsers.Where(x => x.Id == item.ModifiedBy).FirstOrDefault();
                                if (userModifiedObj != null)
                                {
                                    vquotationNewObj.ModifierName = db.tblEmployees.Where(x => x.Id == userModifiedObj.EmployeeId).Select(x => x.EmployeeName).FirstOrDefault();
                                }

                                // Customer Detail
                                var vWorkOrderCustomerObj = db.tblCustomers.Where(w => w.Id == workOrderObj.CustomerId).FirstOrDefault();
                                if (vWorkOrderCustomerObj != null)
                                {
                                    vquotationNewObj.customerDetails.CustomerId = workOrderObj.CustomerId;
                                    vquotationNewObj.customerDetails.OrganizationName = workOrderObj.CompanyName;
                                    vquotationNewObj.customerDetails.CustomerName = vWorkOrderCustomerObj.FirstName + " " + vWorkOrderCustomerObj.LastName;
                                    vquotationNewObj.customerDetails.CustomerGstNumber = workOrderObj.GSTNumber;
                                    vquotationNewObj.customerDetails.CustomerMobile = vWorkOrderCustomerObj.Mobile;
                                    vquotationNewObj.customerDetails.CustomerEmail = vWorkOrderCustomerObj.Email;

                                    var vWorkOrderCustomerAddressObj = db.tblPermanentAddresses.Where(w => w.Id == workOrderObj.ServiceAddressId).FirstOrDefault();
                                    if (vWorkOrderCustomerAddressObj != null)
                                    {
                                        vquotationNewObj.customerDetails.BillToAddress = vWorkOrderCustomerAddressObj.Address;
                                        vquotationNewObj.customerDetails.DeliverToAddress = vWorkOrderCustomerAddressObj.Address;
                                    }

                                    var vWorkOrderBranchObj = db.tblBranches.Where(w => w.Id == workOrderObj.BranchId).FirstOrDefault();
                                    if (vWorkOrderBranchObj != null)
                                    {
                                        var vWorkOrderStateObj = db.tblStates.Where(w => w.Id == vWorkOrderBranchObj.StateId).FirstOrDefault();
                                        if (vWorkOrderStateObj != null)
                                        {
                                            vquotationNewObj.customerDetails.CustomerStateCode = Convert.ToInt32(vWorkOrderStateObj.StateCode);
                                        }
                                    }
                                }

                                // Product Detail
                                vquotationNewObj.productDetails.ProductTypeId = workOrderObj.ProductTypeId;
                                vquotationNewObj.productDetails.ProductType = workOrderObj.ProductType;
                                vquotationNewObj.productDetails.ProductMakeId = workOrderObj.ProductMakeId;
                                vquotationNewObj.productDetails.ProductMake = workOrderObj.ProductMake;
                                vquotationNewObj.productDetails.ProductModelId = workOrderObj.ProductModelId;
                                vquotationNewObj.productDetails.ProductModel = workOrderObj.ProductModel;
                                vquotationNewObj.productDetails.ProdModelIfOther = workOrderObj.ProdModelIfOther;
                                vquotationNewObj.productDetails.ProductDescriptionId = workOrderObj.ProductDescriptionId;
                                vquotationNewObj.productDetails.ProductDescription = workOrderObj.ProductDescription;
                                vquotationNewObj.productDetails.ProdDescriptionIfOther = workOrderObj.ProdDescriptionIfOther;
                                vquotationNewObj.productDetails.ProductSerialNumber = workOrderObj.ProductSerialNumber;
                                vquotationNewObj.productDetails.ProductNumber = workOrderObj.ProductNumber;

                                // Service Charge
                                var serviceChargeObj = db.tblQuotationServiceChargeDetailsLogs.Where(x => x.QuotationLogId == item.Id).FirstOrDefault();
                                if (serviceChargeObj != null)
                                {
                                    vquotationNewObj.serviceChargeDetails.ProductTypeId = serviceChargeObj.ProductTypeId;
                                    vquotationNewObj.serviceChargeDetails.ProductType = db.tblProductTypes.Where(x => x.Id == serviceChargeObj.ProductTypeId).Select(x => x.ProductType).FirstOrDefault();
                                    vquotationNewObj.serviceChargeDetails.HSNCodeId = serviceChargeObj.HSNCodeId;
                                    vquotationNewObj.serviceChargeDetails.HSNCode = db.tblHSNCodeGSTMappings.Where(x => x.Id == serviceChargeObj.HSNCodeId).Select(x => x.HSNCode).FirstOrDefault();
                                    vquotationNewObj.serviceChargeDetails.TravelRangeId = serviceChargeObj.TravelRangeId;
                                    vquotationNewObj.serviceChargeDetails.TravelRange = db.tblTravelRanges.Where(x => x.Id == serviceChargeObj.TravelRangeId).Select(x => x.TravelRange).FirstOrDefault();
                                    vquotationNewObj.serviceChargeDetails.Price = serviceChargeObj.Price;
                                    vquotationNewObj.serviceChargeDetails.Description = serviceChargeObj.Description;
                                    vquotationNewObj.serviceChargeDetails.DiscPerct = serviceChargeObj.DiscPerct;
                                    vquotationNewObj.serviceChargeDetails.DiscValue = serviceChargeObj.DiscValue;
                                    vquotationNewObj.serviceChargeDetails.GSTType = serviceChargeObj.GSTType;
                                    vquotationNewObj.serviceChargeDetails.CGSTPerct = serviceChargeObj.CGSTPerct;
                                    vquotationNewObj.serviceChargeDetails.CGSTValue = serviceChargeObj.CGSTValue;
                                    vquotationNewObj.serviceChargeDetails.SGSTPerct = serviceChargeObj.SGSTPerct;
                                    vquotationNewObj.serviceChargeDetails.SGSTValue = serviceChargeObj.SGSTValue;
                                    vquotationNewObj.serviceChargeDetails.IGSTPerct = serviceChargeObj.IGSTPerct;
                                    vquotationNewObj.serviceChargeDetails.IGSTValue = serviceChargeObj.IGSTValue;
                                    vquotationNewObj.serviceChargeDetails.PriceAfterDisc = serviceChargeObj.PriceAfterDisc;
                                }

                                // Part Details
                                var quotationPartObj = db.tblQuotationPartDetailsLogs.Where(x => x.QuotationLogId == item.Id).ToList();
                                foreach (var itemWOPart in quotationPartObj)
                                {
                                    string sPartNumber = "";
                                    string sPartDescription = "";
                                    int sHSNCodeId = 0;
                                    string sHSNCode = "";

                                    if (itemWOPart.PartId == 0)
                                    {
                                        sPartNumber = itemWOPart.PartNumber;
                                        sPartDescription = itemWOPart.PartDescription;

                                        vquotationNewObj.partDetails.Add(new PartDetails
                                        {
                                            PartId = 0,
                                            PartNumber = sPartNumber,
                                            HSNCodeId = sHSNCodeId,
                                            HSNCode = sHSNCode,
                                            PartDescription = sPartDescription,
                                            Qty = itemWOPart.Qty,
                                            Price = itemWOPart.Price,
                                            DiscPerct = itemWOPart.DiscPerct,
                                            DiscValue = itemWOPart.DiscValue,
                                            GSTType = itemWOPart.GSTType,
                                            CGSTPerct = itemWOPart.CGSTPerct,
                                            CGSTValue = itemWOPart.CGSTValue,
                                            SGSTPerct = itemWOPart.SGSTPerct,
                                            SGSTValue = itemWOPart.SGSTValue,
                                            IGSTPerct = itemWOPart.IGSTPerct,
                                            IGSTValue = itemWOPart.IGSTValue,
                                            PriceAfterDisc = itemWOPart.PriceAfterDisc,
                                        });
                                    }
                                    else
                                    {
                                        var vPartObj = db.tblPartDetails.Where(x => x.Id == itemWOPart.PartId).FirstOrDefault();
                                        if (vPartObj != null)
                                        {
                                            var objHSN = db.tblHSNCodeGSTMappings.Where(x => x.Id == vPartObj.HSNCodeId).FirstOrDefault();
                                            if (objHSN != null)
                                            {
                                                sHSNCodeId = objHSN.Id;
                                                sHSNCode = objHSN.HSNCode;
                                            }

                                            sPartNumber = vPartObj.PartNumber;
                                            sPartDescription = vPartObj.PartDescription;

                                            vquotationNewObj.partDetails.Add(new PartDetails
                                            {
                                                PartId = vPartObj.Id,
                                                PartNumber = sPartNumber,
                                                HSNCodeId = sHSNCodeId,
                                                HSNCode = sHSNCode,
                                                PartDescription = sPartDescription,
                                                Qty = itemWOPart.Qty,
                                                Price = itemWOPart.Price,
                                                DiscPerct = itemWOPart.DiscPerct,
                                                DiscValue = itemWOPart.DiscValue,
                                                GSTType = itemWOPart.GSTType,
                                                CGSTPerct = itemWOPart.CGSTPerct,
                                                CGSTValue = itemWOPart.CGSTValue,
                                                SGSTPerct = itemWOPart.SGSTPerct,
                                                SGSTValue = itemWOPart.SGSTValue,
                                                IGSTPerct = itemWOPart.IGSTPerct,
                                                IGSTValue = itemWOPart.IGSTValue,
                                                PriceAfterDisc = itemWOPart.PriceAfterDisc,
                                            });
                                        }
                                    }
                                }
                            }
                        }

                        quotationObjList.Add(vquotationNewObj);
                    }
                }

                _response.Data = quotationObjList;
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        [Route("api/QuotationAPI/SaveQuotationImage")]
        public Response SaveQuotationImage(QuotationImage parameters)
        {
            try
            {
                FileManager fileManager = new FileManager();

                fileManager.UploadQuotation(parameters.QuotationNumber, parameters.Base64String, HttpContext.Current);

                _response.IsSuccess = true;
                _response.Message = "Quotation image saved successfully";
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        [Route("api/QuotationAPI/GetQuotationImage")]
        public Response GetQuotationImage(string QuotationNumber)
        {
            var host = Url.Content("~/");

            try
            {
                var folderPath = host + "Uploads/Quotation/" + QuotationNumber + ".pdf";

                string fileName = $"{HttpContext.Current.Server.MapPath("~")}\\Uploads\\Quotation\\" + QuotationNumber + ".pdf";

                if (File.Exists(fileName))
                {
                    _response.IsSuccess = true;
                    _response.Data = folderPath;
                }
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        //[Route("api/QuotationAPI/QuotationDownload")]
        //public async Task<Response> QuotationDownload(string QuotationNumber)
        //{
        //    Quotation quotationObj = new Quotation();
        //    FileManager fileManager = new FileManager();

        //    try
        //    {
        //        var vQuotationObj = db.tblQuotations.Where(x => x.QuotationNumber == QuotationNumber).FirstOrDefault();
        //        if (vQuotationObj != null)
        //        {
        //            var vWorkOrderObj = db.tblWorkOrders.Where(x => x.Id == vQuotationObj.WorkOrderId).FirstOrDefault();
        //            if (vWorkOrderObj != null)
        //            {
        //                var workOrderObj = db.GetWorkOrderDetails(vWorkOrderObj.WorkOrderNumber).FirstOrDefault();
        //                if (workOrderObj != null)
        //                {
        //                    // Header Detail
        //                    quotationObj.QuotationId = vQuotationObj.Id;
        //                    quotationObj.QuoteDate = vQuotationObj.QuoteDate;
        //                    quotationObj.QuotationNumber = vQuotationObj.QuotationNumber;
        //                    quotationObj.WorkOrderId = workOrderObj.Id;
        //                    quotationObj.WorkOrderNumber = workOrderObj.WorkOrderNumber;
        //                    quotationObj.BranchId = workOrderObj.BranchId;
        //                    quotationObj.BranchName = workOrderObj.BranchName;
        //                    quotationObj.AmountBeforeTax = vQuotationObj.AmountBeforeTax;
        //                    quotationObj.CGSTPerct = vQuotationObj.CGSTPerct;
        //                    quotationObj.CGSTValue = vQuotationObj.CGSTValue;
        //                    quotationObj.SGSTPerct = vQuotationObj.SGSTPerct;
        //                    quotationObj.SGSTValue = vQuotationObj.SGSTValue;
        //                    quotationObj.IGSTPerct = vQuotationObj.IGSTPerct;
        //                    quotationObj.IGSTValue = vQuotationObj.IGSTValue;
        //                    quotationObj.TotalDiscAmt = vQuotationObj.TotalDiscAmt;
        //                    quotationObj.GrossAmountIncludeTax = vQuotationObj.GrossAmountIncludeTax;
        //                    quotationObj.AdvanceReceived = vQuotationObj.AdvanceReceived;
        //                    quotationObj.AmountPaidAfter = vQuotationObj.AmountPaidAfter;
        //                    quotationObj.CreatedBy = vQuotationObj.CreatedBy;
        //                    quotationObj.ModifyBy = vQuotationObj.ModifiedBy; ;

        //                    var userCreatorObj = db.tblUsers.Where(x => x.Id == vQuotationObj.CreatedBy).FirstOrDefault();
        //                    if (userCreatorObj != null)
        //                    {
        //                        quotationObj.CreatorName = db.tblEmployees.Where(x => x.Id == userCreatorObj.EmployeeId).Select(x => x.EmployeeName).FirstOrDefault();
        //                    }

        //                    var userModifiedObj = db.tblUsers.Where(x => x.Id == vQuotationObj.ModifiedBy).FirstOrDefault();
        //                    if (userModifiedObj != null)
        //                    {
        //                        quotationObj.ModifierName = db.tblEmployees.Where(x => x.Id == userModifiedObj.EmployeeId).Select(x => x.EmployeeName).FirstOrDefault();
        //                    }

        //                    // Customer Detail
        //                    var vWorkOrderCustomerObj = db.tblCustomers.Where(w => w.Id == workOrderObj.CustomerId).FirstOrDefault();
        //                    if (vWorkOrderCustomerObj != null)
        //                    {
        //                        quotationObj.customerDetails.CustomerId = workOrderObj.CustomerId;
        //                        quotationObj.customerDetails.OrganizationName = workOrderObj.CompanyName;
        //                        quotationObj.customerDetails.CustomerName = vWorkOrderCustomerObj.FirstName + " " + vWorkOrderCustomerObj.LastName;
        //                        quotationObj.customerDetails.CustomerGstNumber = workOrderObj.GSTNumber;
        //                        quotationObj.customerDetails.CustomerMobile = vWorkOrderCustomerObj.Mobile;
        //                        quotationObj.customerDetails.CustomerEmail = vWorkOrderCustomerObj.Email;

        //                        var vWorkOrderCustomerAddressObj = db.tblPermanentAddresses.Where(w => w.Id == workOrderObj.ServiceAddressId).FirstOrDefault();
        //                        if (vWorkOrderCustomerAddressObj != null)
        //                        {
        //                            quotationObj.customerDetails.BillToAddress = vWorkOrderCustomerAddressObj.Address;
        //                            quotationObj.customerDetails.DeliverToAddress = vWorkOrderCustomerAddressObj.Address;
        //                        }

        //                        var vWorkOrderBranchObj = db.tblBranches.Where(w => w.Id == workOrderObj.BranchId).FirstOrDefault();
        //                        if (vWorkOrderBranchObj != null)
        //                        {
        //                            var vWorkOrderStateObj = db.tblStates.Where(w => w.Id == vWorkOrderBranchObj.StateId).FirstOrDefault();
        //                            if (vWorkOrderStateObj != null)
        //                            {
        //                                quotationObj.customerDetails.CustomerStateCode = Convert.ToInt32(vWorkOrderStateObj.StateCode);
        //                            }
        //                        }
        //                    }

        //                    // Product Detail
        //                    quotationObj.productDetails.ProductTypeId = workOrderObj.ProductTypeId;
        //                    quotationObj.productDetails.ProductType = workOrderObj.ProductType;
        //                    quotationObj.productDetails.ProductMakeId = workOrderObj.ProductMakeId;
        //                    quotationObj.productDetails.ProductMake = workOrderObj.ProductMake;
        //                    quotationObj.productDetails.ProductModelId = workOrderObj.ProductModelId;
        //                    quotationObj.productDetails.ProductModel = workOrderObj.ProductModel;
        //                    quotationObj.productDetails.ProdModelIfOther = workOrderObj.ProdModelIfOther;
        //                    quotationObj.productDetails.ProductDescriptionId = workOrderObj.ProductDescriptionId;
        //                    quotationObj.productDetails.ProductDescription = workOrderObj.ProductDescription;
        //                    quotationObj.productDetails.ProdDescriptionIfOther = workOrderObj.ProdDescriptionIfOther;
        //                    quotationObj.productDetails.ProductSerialNumber = workOrderObj.ProductSerialNumber;
        //                    quotationObj.productDetails.ProductNumber = workOrderObj.ProductNumber;

        //                    // Service Charge
        //                    var serviceChargeObj = db.tblQuotationServiceChargeDetails.Where(x => x.QuotationId == vQuotationObj.Id).FirstOrDefault();
        //                    if (serviceChargeObj != null)
        //                    {
        //                        quotationObj.serviceChargeDetails.ProductTypeId = serviceChargeObj.ProductTypeId;
        //                        quotationObj.serviceChargeDetails.ProductType = db.tblProductTypes.Where(x => x.Id == serviceChargeObj.ProductTypeId).Select(x => x.ProductType).FirstOrDefault();
        //                        quotationObj.serviceChargeDetails.HSNCodeId = serviceChargeObj.HSNCodeId;
        //                        quotationObj.serviceChargeDetails.HSNCode = db.tblHSNCodeGSTMappings.Where(x => x.Id == serviceChargeObj.HSNCodeId).Select(x => x.HSNCode).FirstOrDefault();
        //                        quotationObj.serviceChargeDetails.TravelRangeId = serviceChargeObj.TravelRangeId;
        //                        quotationObj.serviceChargeDetails.TravelRange = db.tblTravelRanges.Where(x => x.Id == serviceChargeObj.TravelRangeId).Select(x => x.TravelRange).FirstOrDefault();
        //                        quotationObj.serviceChargeDetails.Price = serviceChargeObj.Price;
        //                        quotationObj.serviceChargeDetails.Description = serviceChargeObj.Description;
        //                        quotationObj.serviceChargeDetails.DiscPerct = serviceChargeObj.DiscPerct;
        //                        quotationObj.serviceChargeDetails.DiscValue = serviceChargeObj.DiscValue;
        //                        quotationObj.serviceChargeDetails.CGSTPerct = serviceChargeObj.CGSTPerct;
        //                        quotationObj.serviceChargeDetails.CGSTValue = serviceChargeObj.CGSTValue;
        //                        quotationObj.serviceChargeDetails.SGSTPerct = serviceChargeObj.SGSTPerct;
        //                        quotationObj.serviceChargeDetails.SGSTValue = serviceChargeObj.SGSTValue;
        //                        quotationObj.serviceChargeDetails.IGSTPerct = serviceChargeObj.IGSTPerct;
        //                        quotationObj.serviceChargeDetails.IGSTValue = serviceChargeObj.IGSTValue;
        //                        quotationObj.serviceChargeDetails.PriceAfterDisc = serviceChargeObj.PriceAfterDisc;
        //                    }

        //                    // Part Details
        //                    var quotationPartObj = db.tblQuotationPartDetails.Where(x => x.QuotationId == vQuotationObj.Id).ToList();
        //                    foreach (var itemWOPart in quotationPartObj)
        //                    {
        //                        string sPartNumber = "";
        //                        string sPartDescription = "";
        //                        int sHSNCodeId = 0;
        //                        string sHSNCode = "";

        //                        var vPartObj = db.tblPartDetails.Where(x => x.Id == itemWOPart.PartId).FirstOrDefault();
        //                        if (vPartObj != null)
        //                        {
        //                            var objHSN = db.tblHSNCodeGSTMappings.Where(x => x.Id == vPartObj.HSNCodeId).FirstOrDefault();
        //                            if (objHSN != null)
        //                            {
        //                                sHSNCodeId = objHSN.Id;
        //                                sHSNCode = objHSN.HSNCode;
        //                            }

        //                            sPartNumber = vPartObj.PartNumber;
        //                            sPartDescription = vPartObj.PartDescription;

        //                            quotationObj.partDetails.Add(new PartDetails
        //                            {
        //                                PartId = vPartObj.Id,
        //                                PartNumber = sPartNumber,
        //                                HSNCodeId = sHSNCodeId,
        //                                HSNCode = sHSNCode,
        //                                PartDescription = sPartDescription,
        //                                Qty = itemWOPart.Qty,
        //                                Price = itemWOPart.Price,
        //                                DiscPerct = itemWOPart.DiscPerct,
        //                                DiscValue = itemWOPart.DiscValue,
        //                                CGSTPerct = itemWOPart.CGSTPerct,
        //                                CGSTValue = itemWOPart.CGSTValue,
        //                                SGSTPerct = itemWOPart.SGSTPerct,
        //                                SGSTValue = itemWOPart.SGSTValue,
        //                                IGSTPerct = itemWOPart.IGSTPerct,
        //                                IGSTValue = itemWOPart.IGSTValue,
        //                                PriceAfterDisc = itemWOPart.PriceAfterDisc,
        //                            });
        //                        }
        //                    }
        //                }
        //            }
        //        }

        //        // _response.Data = quotationObj;

        //        bool result = false;
        //        string templateFilePath, emailTemplateContent, productsListContent;
        //        string senderCompanyLogo;
        //        int productIndex;

        //        templateFilePath = $"{HttpContext.Current.Server.MapPath("~")}\\EmailTemplates\\QuotationTemplate.html";
        //        emailTemplateContent = File.ReadAllText(templateFilePath);

        //        senderCompanyLogo = db.tblConfigurationMasters.Where(c => c.ConfigKey == ConfigConstants.SenderCompanyLogo).FirstOrDefault().ConfigValue.SanitizeValue();

        //        if (emailTemplateContent.IndexOf("[CustomerDetails_BillToAddress]", StringComparison.OrdinalIgnoreCase) > 0)
        //        {
        //            emailTemplateContent = emailTemplateContent.Replace("[CustomerDetails_BillToAddress]", quotationObj.customerDetails.BillToAddress);
        //        }

        //        //if (emailTemplateContent.IndexOf("[CustomerName]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerName]", $"{customer.FirstName} {customer.LastName}");
        //        //}

        //        //if (emailTemplateContent.IndexOf("[CustomerEmail]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerEmail]", customer.Email);
        //        //}

        //        //if (emailTemplateContent.IndexOf("[CustomerPhone]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerPhone]", customer.Mobile);
        //        //}

        //        //if (emailTemplateContent.IndexOf("[CustomerAlternateNumber]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerAlternateNumber]", parameters.AlternateMobileNo);
        //        //}

        //        //if (emailTemplateContent.IndexOf("[CustomerGstNumber]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerGstNumber]", parameters.CustomerGstNo);
        //        //}

        //        //if (emailTemplateContent.IndexOf("[PaymentTerm]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[PaymentTerm]", db.tblPaymentTerms.Where(p => p.Id == parameters.PaymentTermId).Select(p => p.PaymentTerms).FirstOrDefault());
        //        //}

        //        //if (emailTemplateContent.IndexOf("[AddressFullName]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[AddressFullName]", defaultAddress.NameForAddress.SanitizeValue());
        //        //}

        //        //if (emailTemplateContent.IndexOf("[AddressMobileNo]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[AddressMobileNo]", defaultAddress.MobileNo.SanitizeValue());
        //        //}

        //        //if (emailTemplateContent.IndexOf("[CustomerAddress]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerAddress]", defaultAddress.Address);
        //        //}

        //        //if (emailTemplateContent.IndexOf("[CustomerState]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerState]", db.tblStates.Where(s => s.Id == defaultAddress.StateId).Select(a => a.StateName).FirstOrDefault());
        //        //}

        //        //if (emailTemplateContent.IndexOf("[CustomerCity]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerCity]", db.tblCities.Where(c => c.Id == defaultAddress.CityId).Select(a => a.CityName).FirstOrDefault());
        //        //}

        //        //if (emailTemplateContent.IndexOf("[CustomerArea]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerArea]", db.tblAreas.Where(a => a.Id == defaultAddress.AreaId).Select(a => a.AreaName).FirstOrDefault());
        //        //}

        //        //if (emailTemplateContent.IndexOf("[CustomerPincode]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[CustomerPincode]", db.tblPincodes.Where(p => p.Id == defaultAddress.PinCodeId).Select(a => a.Pincode).FirstOrDefault());
        //        //}

        //        if (emailTemplateContent.IndexOf("[PartDetailList]", StringComparison.OrdinalIgnoreCase) > 0)
        //        {
        //            productsListContent = string.Empty;
        //            productIndex = 0;

        //            foreach (var partItem in quotationObj.partDetails)
        //            {
        //                productsListContent = $@"{productsListContent}
        //                <tr>
        //                    <td style=""padding: 3px; text-align: left; border-bottom: 1px solid #ddd; border: 1px solid #ccc;"">{partItem.PartNumber}</td>
        //                    <td style=""padding: 3px; text-align: left; border-bottom: 1px solid #ddd; border: 1px solid #ccc;"">{partItem.HSNCode}</td>
        //                </tr>";

        //                productIndex++;
        //            }

        //            emailTemplateContent = emailTemplateContent.Replace("[PartDetailList]", productsListContent);
        //        }

        //        //if (emailTemplateContent.IndexOf("[SenderName]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[SenderName]", db.tblConfigurationMasters.Where(c => c.ConfigKey == ConfigConstants.EmailSenderName).FirstOrDefault().ConfigValue);
        //        //}

        //        //if (emailTemplateContent.IndexOf("[SenderCompanyLogo]", StringComparison.OrdinalIgnoreCase) > 0)
        //        //{
        //        //    emailTemplateContent = emailTemplateContent.Replace("[SenderCompanyLogo]", ImageToBase64(senderCompanyLogo));
        //        //}

        //        string folderPath = $"{HttpContext.Current.Server.MapPath("~")}" + "Uploads\\Quotation";
        //        string fileName = folderPath + "\\" + quotationObj.QuotationNumber + ".html";

        //        if (!Directory.Exists(folderPath))
        //        {
        //            Directory.CreateDirectory(folderPath);
        //        }

        //        if (!File.Exists(fileName))
        //        {
        //            File.Delete(fileName);
        //        }

        //        System.IO.File.WriteAllText(fileName, emailTemplateContent);

        //        //fileManager.createPDFLink(emailTemplateContent);


        //        string temp_inBase64 = string.Empty;
        //        Byte[] res = null;
        //        using (MemoryStream ms = new MemoryStream())
        //        {
        //            var pdf = TheArtOfDev.HtmlRenderer.PdfSharp.PdfGenerator.GeneratePdf(emailTemplateContent, PdfSharp.PageSize.A4);
        //            pdf.Save(ms);
        //            res = ms.ToArray();
        //        }



        //        temp_inBase64 = Convert.ToBase64String(res);


        //        //System.IO.File.WriteAllText($"{HttpContext.Current.Server.MapPath("~")}\\Uploads\\Quotation\\quotationObj" + quotationObj.QuotationNumber + DateTime.Now + ".htm", emailTemplateContent);

        //    }
        //    catch (Exception ex)
        //    {
        //        _response.IsSuccess = false;
        //        _response.Message = ValidationConstant.InternalServerError;
        //        LogWriter.WriteLog(ex);
        //    }

        //    return _response;
        //}

        //[Route("api/QuotationAPI/QuotationDownloadTest")]
        //public async Task<Response> QuotationDownloadTest()
        //{
        //    Quotation quotationObj = new Quotation();
        //    FileManager fileManager = new FileManager();

        //    try
        //    {
        //        StringBuilder sb = new StringBuilder();
        //        sb.Append("<header class='clearfix'>");
        //        sb.Append("<h1>INVOICE</h1>");
        //        sb.Append("<divstyle='border: 1px solid black; margin : 5px;'><divstyle='display: flex; border : 1px solid #ccc; padding : 5px;'><divstyle='border : none; flex: 1; padding: 3px; font-size : 12px;'><divstyle='display : flex;'>Contact:70300-87-300</div><divstyle='display : flex;'>WhatsApp:70300-87-300</div><divstyle='display : flex;'>E-mail:Support@quikservindia.com</div></div><divstyle='flex: 1; padding: 3px; border: 1px solid #ccc; border: none; display: flex; justify-content: center; align-items: center;'><divstyle='font-size: x-large; font-weight: 800;text-align: center;'>Quotation/Proforma</div></div><divstyle='flex: 1; padding: 3px; border: none; font-size : 12px;'><imgstyle='width: 15px; height: 15px'alt='NotFoun'src=[logo]/><divstyle='display : flex;'><div>Brandownedby</div></div><divstyle='display : flex;'><div>ORAREGATECHNOLOGIES(OPC)Pvt.Ltd.</div></div><divstyle='display : flex;'><div>CIN:U72900PN2019OPC182042</div></div></div></div>");
        //        sb.Append("<div>Company Name</div>");
        //        sb.Append("<div>455 John Tower,<br /> AZ 85004, US</div>");
        //        sb.Append("<div>(602) 519-0450</div>");
        //        sb.Append("<div><a href='mailto:company@example.com'>company@example.com</a></div>");
        //        sb.Append("</div>");
        //        sb.Append("<div id='project'>");
        //        sb.Append("<div><span>PROJECT</span> Website development</div>");
        //        sb.Append("<div><span>CLIENT</span> John Doe</div>");
        //        sb.Append("<div><span>ADDRESS</span> 796 Silver Harbour, TX 79273, US</div>");
        //        sb.Append("<div><span>EMAIL</span> <a href='mailto:john@example.com'>john@example.com</a></div>");
        //        sb.Append("<div><span>DATE</span> April 13, 2016</div>");
        //        sb.Append("<div><span>DUE DATE</span> May 13, 2016</div>");
        //        sb.Append("</div>");
        //        sb.Append("</header>");
        //        sb.Append("<main>");
        //        sb.Append("<table>");
        //        sb.Append("<thead>");
        //        sb.Append("<tr>");
        //        sb.Append("<th class='service'>SERVICE</th>");
        //        sb.Append("<th class='desc'>DESCRIPTION</th>");
        //        sb.Append("<th>PRICE</th>");
        //        sb.Append("<th>QTY</th>");
        //        sb.Append("<th>TOTAL</th>");
        //        sb.Append("</tr>");
        //        sb.Append("</thead>");
        //        sb.Append("<tbody>");
        //        sb.Append("<tr>");
        //        sb.Append("<td class='service'>Design</td>");
        //        sb.Append("<td class='desc'>Creating a recognizable design solution based on the company's existing visual identity</td>");
        //        sb.Append("<td class='unit'>$400.00</td>");
        //        sb.Append("<td class='qty'>2</td>");
        //        sb.Append("<td class='total'>$800.00</td>");
        //        sb.Append("</tr>");
        //        sb.Append("<tr>");
        //        sb.Append("<td colspan='4'>SUBTOTAL</td>");
        //        sb.Append("<td class='total'>$800.00</td>");
        //        sb.Append("</tr>");
        //        sb.Append("<tr>");
        //        sb.Append("<td colspan='4'>TAX 25%</td>");
        //        sb.Append("<td class='total'>$200.00</td>");
        //        sb.Append("</tr>");
        //        sb.Append("<tr>");
        //        sb.Append("<td colspan='4' class='grand total'>GRAND TOTAL</td>");
        //        sb.Append("<td class='grand total'>$1,000.00</td>");
        //        sb.Append("</tr>");
        //        sb.Append("</tbody>");
        //        sb.Append("</table>");
        //        sb.Append("<div id='notices'>");
        //        sb.Append("<div>NOTICE:</div>");
        //        sb.Append("<div class='notice'>A finance charge of 1.5% will be made on unpaid balances after 30 days.</div>");
        //        sb.Append("</div>");
        //        sb.Append("</main>");
        //        sb.Append("<footer>");
        //        sb.Append("Invoice was created on a computer and is valid without the signature and seal.");
        //        sb.Append("</footer>");

        //        StringReader sr = new StringReader(sb.ToString());
        //        iTextSharp.text.Document pdfDoc = new iTextSharp.text.Document(iTextSharp.text.PageSize.A4, 10f, 10f, 10f, 0f);
        //        HTMLWorker htmlparser = new HTMLWorker(pdfDoc);

        //        string temp_inBase64 = string.Empty;
        //        using (MemoryStream memoryStream = new MemoryStream())
        //        {
        //            PdfWriter writer = PdfWriter.GetInstance(pdfDoc, memoryStream);
        //            pdfDoc.Open();

        //            htmlparser.Parse(sr);
        //            pdfDoc.Close();

        //            byte[] bytes = memoryStream.ToArray();
        //            memoryStream.Close();

        //            temp_inBase64 = Convert.ToBase64String(bytes);
        //        }

        //        _response.Data = temp_inBase64;
        //    }
        //    catch (Exception ex)
        //    {
        //        _response.IsSuccess = false;
        //        _response.Message = ValidationConstant.InternalServerError;
        //        LogWriter.WriteLog(ex);
        //    }

        //    return _response;
        //}

    }
}