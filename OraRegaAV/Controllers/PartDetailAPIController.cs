using Newtonsoft.Json;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using OraRegaAV.DBEntity;
using OraRegaAV.Helpers;
using OraRegaAV.Models;
using OraRegaAV.Models.Constants;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Migrations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http;

namespace OraRegaAV.Controllers.API
{
    public class PartDetailAPIController : ApiCustomBaseController
    {
        private readonly dbOraRegaEntities db = new dbOraRegaEntities();
        private Response _response = new Response();
        public PartDetailAPIController()
        {
            _response.IsSuccess = true;
        }

        [HttpPost]
        public async Task<Response> SavePartDetail(tblPartDetail objtblPartDetail)
        {
            tblPartDetail tblPartDetail;

            try
            {
                //var ucode = Utilities.PartDetails_UniqueCodeAutoGenerated();
                tblPartDetail = db.tblPartDetails.Where(record => record.Id == objtblPartDetail.Id).FirstOrDefault();

                if (tblPartDetail == null)
                {
                    if (objtblPartDetail.Quantity == 0)
                    {
                        tblPartDetail = new tblPartDetail();
                        //tblPartDetail.UniqueCode = objtblPartDetail.UniqueCode;
                        tblPartDetail.UniqueCode = Utilities.PartDetails_UniqueCodeAutoGenerated();
                        tblPartDetail.PartNumber = objtblPartDetail.PartNumber;
                        tblPartDetail.PartName = objtblPartDetail.PartName;
                        tblPartDetail.PartDescription = objtblPartDetail.PartDescription;
                        tblPartDetail.HSNCodeId = objtblPartDetail.HSNCodeId;
                        tblPartDetail.CTSerialNo = objtblPartDetail.CTSerialNo;
                        tblPartDetail.PartStatusId = objtblPartDetail.PartStatusId;
                        tblPartDetail.SalePrice = objtblPartDetail.SalePrice;
                        tblPartDetail.IsActive = objtblPartDetail.IsActive;
                        tblPartDetail.CompanyId = objtblPartDetail.CompanyId;
                        tblPartDetail.BranchId = objtblPartDetail.BranchId;
                        tblPartDetail.ReceiveFrom = objtblPartDetail.ReceiveFrom;
                        tblPartDetail.ReceiveDate = objtblPartDetail.ReceiveDate;
                        tblPartDetail.DocketNo = objtblPartDetail.DocketNo;
                        tblPartDetail.PurchasePrice = objtblPartDetail.PurchasePrice;
                        tblPartDetail.VendorId = objtblPartDetail.VendorId;
                        tblPartDetail.StockPartStatusId = objtblPartDetail.StockPartStatusId;
                        tblPartDetail.Quantity = objtblPartDetail.Quantity;
                        tblPartDetail.CreatedBy = Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0);
                        tblPartDetail.CreatedDate = DateTime.Now;

                        db.tblPartDetails.AddOrUpdate(tblPartDetail);

                        await db.SaveChangesAsync();
                    }
                    if (objtblPartDetail.Quantity > 0)
                    {
                        for (int i = 0; i < objtblPartDetail.Quantity; i++)
                        {
                            tblPartDetail = new tblPartDetail();
                            //tblPartDetail.UniqueCode = objtblPartDetail.UniqueCode;
                            tblPartDetail.UniqueCode = Utilities.PartDetails_UniqueCodeAutoGenerated();
                            tblPartDetail.PartNumber = objtblPartDetail.PartNumber;
                            tblPartDetail.PartName = objtblPartDetail.PartName;
                            tblPartDetail.PartDescription = objtblPartDetail.PartDescription;
                            tblPartDetail.HSNCodeId = objtblPartDetail.HSNCodeId;
                            tblPartDetail.CTSerialNo = objtblPartDetail.CTSerialNo;
                            tblPartDetail.PartStatusId = objtblPartDetail.PartStatusId;
                            tblPartDetail.SalePrice = objtblPartDetail.SalePrice;
                            tblPartDetail.IsActive = objtblPartDetail.IsActive;
                            tblPartDetail.CompanyId = objtblPartDetail.CompanyId;
                            tblPartDetail.BranchId = objtblPartDetail.BranchId;
                            tblPartDetail.ReceiveFrom = objtblPartDetail.ReceiveFrom;
                            tblPartDetail.ReceiveDate = objtblPartDetail.ReceiveDate;
                            tblPartDetail.DocketNo = objtblPartDetail.DocketNo;
                            tblPartDetail.PurchasePrice = objtblPartDetail.PurchasePrice;
                            tblPartDetail.VendorId = objtblPartDetail.VendorId;
                            tblPartDetail.StockPartStatusId = objtblPartDetail.StockPartStatusId;
                            tblPartDetail.Quantity = 1;//objtblPartDetail.Quantity;
                            tblPartDetail.CreatedBy = Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0);
                            tblPartDetail.CreatedDate = DateTime.Now;

                            db.tblPartDetails.AddOrUpdate(tblPartDetail);

                            await db.SaveChangesAsync();
                        }
                    }

                    _response.Message = "Part Details added successfully";
                }
                else
                {
                    //tblPartDetail.UniqueCode = objtblPartDetail.UniqueCode;
                    tblPartDetail.PartNumber = objtblPartDetail.PartNumber;
                    tblPartDetail.PartName = objtblPartDetail.PartName;
                    tblPartDetail.PartDescription = objtblPartDetail.PartDescription;
                    tblPartDetail.HSNCodeId = objtblPartDetail.HSNCodeId;
                    tblPartDetail.CTSerialNo = objtblPartDetail.CTSerialNo;
                    tblPartDetail.PartStatusId = objtblPartDetail.PartStatusId;
                    tblPartDetail.SalePrice = objtblPartDetail.SalePrice;
                    tblPartDetail.IsActive = objtblPartDetail.IsActive;
                    tblPartDetail.CompanyId = objtblPartDetail.CompanyId;
                    tblPartDetail.BranchId = objtblPartDetail.BranchId;
                    tblPartDetail.ReceiveFrom = objtblPartDetail.ReceiveFrom;
                    tblPartDetail.ReceiveDate = objtblPartDetail.ReceiveDate;
                    tblPartDetail.DocketNo = objtblPartDetail.DocketNo;
                    tblPartDetail.PurchasePrice = objtblPartDetail.PurchasePrice;
                    tblPartDetail.VendorId = objtblPartDetail.VendorId;
                    tblPartDetail.StockPartStatusId = objtblPartDetail.StockPartStatusId;
                    tblPartDetail.Quantity = objtblPartDetail.Quantity;
                    tblPartDetail.ModifiedBy = Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0);
                    tblPartDetail.ModifiedDate = DateTime.Now;
                    _response.Message = "Part Details updated successfully";

                    db.tblPartDetails.AddOrUpdate(tblPartDetail);

                    await db.SaveChangesAsync();
                }


                if (objtblPartDetail.StockEntryId > 0)
                {
                    var objSAPMapping = await db.tblStockAndPartMappings.Where(x => x.StockEntryId == objtblPartDetail.StockEntryId && x.PartDetailId == tblPartDetail.Id).FirstOrDefaultAsync();
                    if (objSAPMapping == null)
                    {
                        tblStockAndPartMapping objTblStockAndPartMapping = new tblStockAndPartMapping()
                        {
                            CreatedBy = Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0),
                            CreatedDate = DateTime.Now,
                            PartDetailId = tblPartDetail.Id,
                            StockEntryId = objtblPartDetail.StockEntryId
                        };
                        db.tblStockAndPartMappings.Add(objTblStockAndPartMapping);
                    }
                    else
                    {
                        objSAPMapping.ModifiedBy = Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0);
                        objSAPMapping.ModifiedDate = DateTime.Now;
                    }
                    await db.SaveChangesAsync();

                }
                _response.IsSuccess = true;

            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        public Response PartsList(PartDetailsSearchParameters parameters)
        {
            _response = RetrievePartsList(parameters.Id, parameters.CompanyId, parameters.BranchId, parameters.SearchValue.SanitizeValue(), parameters.UserId, parameters.PageSize, parameters.PageNo);
            return _response;
        }

        [HttpPost]
        public Response PartDetailsById([FromBody] int Id)
        {
            _response = RetrievePartsList(Id, 0, "", "", 0, 0, 0);
            return _response;
        }

        private Response RetrievePartsList(int Id = 0, int CompanyId = 0, string BranchId = "", string SearchValue = "", int UserId = 0, int PageSize = 0, int PageNo = 0)
        {
            List<GetPartDetailList_Result> tblPartDetailList;

            try
            {
                var vTotal = new ObjectParameter("Total", typeof(int));
                tblPartDetailList = db.GetPartDetailList(Id, CompanyId, BranchId, SearchValue, UserId, PageSize, PageNo, vTotal).ToList();

                _response.TotalCount = Convert.ToInt32(vTotal.Value);
                _response.Data = tblPartDetailList;
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        [Route("api/PartDetailAPI/DownloadStockInList")]
        public Response DownloadStockInList(PartDetailsSearchParameters parameters)
        {
            string uniqueFileId = Guid.NewGuid().ToString().Replace("-", "");
            InvalidFileResponseModel objInvalidFileResponseModel = null;
            try
            {
                //var userId = Convert.ToInt32(ActionContext.Request.Properties["UserId"] ?? 0);

                var vTotal = new ObjectParameter("Total", typeof(int));
                var listObj = db.GetPartDetailList(parameters.Id, parameters.CompanyId, parameters.BranchId, parameters.SearchValue, parameters.UserId, parameters.PageSize, parameters.PageNo, vTotal).ToList();

                if (listObj.Count == 0)
                {
                    _response.IsSuccess = false;
                    _response.Message = "No records found.";
                    return _response;
                }
                else
                {
                    #region Generate Excel file for Department

                    DataTable export_dt = (DataTable)JsonConvert.DeserializeObject(JsonConvert.SerializeObject(listObj), (typeof(DataTable)));

                    if (export_dt.Rows.Count > 0)
                    {
                        ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;
                        ExcelPackage excel = new ExcelPackage();
                        int recordIndex;
                        int srNo = 0;
                        ExcelWorksheet WorkSheet1 = excel.Workbook.Worksheets.Add("Stock_In_List");
                        WorkSheet1.TabColor = System.Drawing.Color.Black;
                        WorkSheet1.DefaultRowHeight = 12;

                        //Header of table
                        WorkSheet1.Row(1).Height = 20;
                        WorkSheet1.Row(1).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        WorkSheet1.Row(1).Style.Font.Bold = true;

                        WorkSheet1.Cells[1, 1].Value = "Sr.No";
                        WorkSheet1.Cells[1, 2].Value = "Branch";
                        WorkSheet1.Cells[1, 3].Value = "Spare Tracking Number (STN)";
                        WorkSheet1.Cells[1, 4].Value = "Docket number";
                        WorkSheet1.Cells[1, 5].Value = "Received From";
                        WorkSheet1.Cells[1, 6].Value = "Received Date";
                        WorkSheet1.Cells[1, 7].Value = "Part Number";
                        WorkSheet1.Cells[1, 8].Value = "Part Name";
                        WorkSheet1.Cells[1, 9].Value = "Part Status";
                        WorkSheet1.Cells[1, 10].Value = "Part Description";
                        WorkSheet1.Cells[1, 11].Value = "CT/Serial";
                        WorkSheet1.Cells[1, 12].Value = "HSN Code";
                        WorkSheet1.Cells[1, 13].Value = "Qty";
                        WorkSheet1.Cells[1, 14].Value = "Purchase Cost (Base Price).";
                        WorkSheet1.Cells[1, 15].Value = "Sale Price";
                        WorkSheet1.Cells[1, 16].Value = "Created Date";
                        WorkSheet1.Cells[1, 17].Value = "Created By";

                        recordIndex = 2;
                        foreach (DataRow dataRow in export_dt.Rows)
                        {
                            srNo++;
                            WorkSheet1.Cells[recordIndex, 1].Value = srNo;
                            WorkSheet1.Cells[recordIndex, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            WorkSheet1.Cells[recordIndex, 2].Value = dataRow["BranchName"];
                            WorkSheet1.Cells[recordIndex, 3].Value = dataRow["UniqueCode"];
                            WorkSheet1.Cells[recordIndex, 4].Value = dataRow["DocketNo"];
                            WorkSheet1.Cells[recordIndex, 5].Value = dataRow["ReceiveFrom"];
                            WorkSheet1.Cells[recordIndex, 6].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                            WorkSheet1.Cells[recordIndex, 6].Value = dataRow["ReceiveDate"];
                            WorkSheet1.Cells[recordIndex, 7].Value = dataRow["PartNumber"];
                            WorkSheet1.Cells[recordIndex, 8].Value = dataRow["PartName"];
                            WorkSheet1.Cells[recordIndex, 9].Value = dataRow["PartStatus"];
                            WorkSheet1.Cells[recordIndex, 10].Value = dataRow["PartDescription"];
                            WorkSheet1.Cells[recordIndex, 11].Value = dataRow["CTSerialNo"];
                            WorkSheet1.Cells[recordIndex, 12].Value = dataRow["HSNCode"];
                            WorkSheet1.Cells[recordIndex, 13].Value = dataRow["Quantity"];
                            WorkSheet1.Cells[recordIndex, 14].Value = dataRow["PurchasePrice"];
                            WorkSheet1.Cells[recordIndex, 15].Value = dataRow["SalePrice"];
                            WorkSheet1.Cells[recordIndex, 16].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                            WorkSheet1.Cells[recordIndex, 16].Value = dataRow["CreatedDate"];
                            WorkSheet1.Cells[recordIndex, 17].Value = dataRow["CreatorName"];

                            recordIndex += 1;
                        }

                        WorkSheet1.Column(1).AutoFit();
                        WorkSheet1.Column(2).AutoFit();
                        WorkSheet1.Column(3).AutoFit();
                        WorkSheet1.Column(4).AutoFit();
                        WorkSheet1.Column(5).AutoFit();
                        WorkSheet1.Column(6).AutoFit();
                        WorkSheet1.Column(7).AutoFit();
                        WorkSheet1.Column(8).AutoFit();
                        WorkSheet1.Column(9).AutoFit();
                        WorkSheet1.Column(10).AutoFit();
                        WorkSheet1.Column(11).AutoFit();
                        WorkSheet1.Column(12).AutoFit();
                        WorkSheet1.Column(13).AutoFit();
                        WorkSheet1.Column(14).AutoFit();
                        WorkSheet1.Column(15).AutoFit();
                        WorkSheet1.Column(16).AutoFit();
                        WorkSheet1.Column(17).AutoFit();

                        using (MemoryStream memoryStream = new MemoryStream())
                        {
                            excel.SaveAs(memoryStream);
                            memoryStream.Position = 0;
                            objInvalidFileResponseModel = new InvalidFileResponseModel()
                            {
                                FileMemoryStream = memoryStream.ToArray(),
                                FileName = "Stock_In_List_" + DateTime.Now.ToString("yyyyMMddHHmmss").Replace(" ", "_") + ".xlsx",
                                FileUniqueId = uniqueFileId
                            };
                        }

                        return new Response()
                        {
                            IsSuccess = true,
                            Message = "Stock In list Generated Successfully.",
                            Data = objInvalidFileResponseModel
                        };
                    }

                    #endregion
                }
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ex.Message;
                throw ex;
            }
            return _response;
        }

        [HttpPost]
        [Route("api/PartDetailAPI/DownloadImportPartDetailTemplate")]
        public Response DownloadImportPartDetailTemplate()
        {
            FileManager fileManager = new FileManager();

            try
            {
                var vTempalteFileinBase64 = fileManager.GetPartDetailTemplate(HttpContext.Current);
                _response.Data = vTempalteFileinBase64;

                _response.IsSuccess = true;

                if (vTempalteFileinBase64.Length > 0)
                    _response.Message = "File template downloaded sucessfully";
                else
                    _response.Message = "File template missing";
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ex.Message;
                throw ex;
            }
            return _response;
        }

        [HttpPost]
        [Route("api/PartDetailAPI/ImportPartDetails")]
        public Response ImportPartDetails()
        {
            string XmlPartDetailsData;
            string uniqueFileId;
            int noOfCol;
            int noOfRow;
            bool tableHasNull = false;
            InvalidFileResponseModel objInvalidFileResponseModel = null;
            List<PartDetailsImportRequestModel> lstPartDetailsImportRequestModel;
            HttpPostedFile stockEntryUploadedFile;
            ExcelWorksheets currentSheet;
            ExcelWorksheet workSheet;
            DataTable dtSETable;
            List<ImportPartDetails_Result> objImportPartDetails_Result;
            DataTable dtInvalidRecords;

            try
            {
                stockEntryUploadedFile = HttpContext.Current.Request.Files.Count > 0 ? HttpContext.Current.Request.Files["PartDetailsFile"] : null;
                objImportPartDetails_Result = new List<ImportPartDetails_Result>();

                if (stockEntryUploadedFile == null)
                {
                    _response.IsSuccess = false;
                    _response.Message = "Please upload a valid Excel file";
                    return _response;
                }

                uniqueFileId = Guid.NewGuid().ToString().Replace("-", "");
                lstPartDetailsImportRequestModel = new List<PartDetailsImportRequestModel>();
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                using (ExcelPackage package = new ExcelPackage(stockEntryUploadedFile.InputStream))
                {
                    currentSheet = package.Workbook.Worksheets;
                    workSheet = currentSheet.FirstOrDefault();
                    noOfCol = workSheet.Dimension.End.Column;
                    noOfRow = workSheet.Dimension.End.Row;

                    for (int rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                    {
                        PartDetailsImportRequestModel record = new PartDetailsImportRequestModel();
                        record.PartNumber = workSheet.Cells[rowIterator, 1].Value.ToString();
                        record.PartName = workSheet.Cells[rowIterator, 2].Value.ToString();
                        record.PartDescription = workSheet.Cells[rowIterator, 3].Value.ToString();
                        record.CTSerialNo = workSheet.Cells[rowIterator, 4].Value.ToString();
                        record.PartStatus = workSheet.Cells[rowIterator, 5].Value.ToString();
                        record.SalePrice = Convert.ToDecimal(workSheet.Cells[rowIterator, 6].Value.ToString());
                        record.CompanyName = workSheet.Cells[rowIterator, 7].Value.ToString();
                        record.BranchName = workSheet.Cells[rowIterator, 8].Value.ToString();
                        record.ReceiveFrom = workSheet.Cells[rowIterator, 9].Value.ToString();
                        record.ReceiveDate = Convert.ToDateTime(workSheet.Cells[rowIterator, 10].Value.ToString());
                        record.DocketNo = workSheet.Cells[rowIterator, 11].Value.ToString();
                        record.PurchasePrice = Convert.ToDecimal(workSheet.Cells[rowIterator, 12].Value.ToString());
                        record.Quantity = Convert.ToInt32(workSheet.Cells[rowIterator, 13].Value.ToString());
                        record.HSNCode = workSheet.Cells[rowIterator, 14].Value.ToString();
                        record.IsActive = workSheet.Cells[rowIterator, 15].Value.ToString();

                        lstPartDetailsImportRequestModel.Add(record);
                    }
                }

                if (lstPartDetailsImportRequestModel.Count == 0)
                {
                    _response.IsSuccess = false;
                    _response.Message = "Uploaded Part Details data file does not contains any record";
                    return _response;
                };

                dtSETable = (DataTable)JsonConvert.DeserializeObject(JsonConvert.SerializeObject(lstPartDetailsImportRequestModel), typeof(DataTable));

                //Excel Column Mismatch check. If column name has been changed then it's value will be null;
                foreach (DataRow row in dtSETable.Rows)
                {
                    foreach (DataColumn col in dtSETable.Columns)
                    {
                        if (row[col] == DBNull.Value)
                        {
                            tableHasNull = true;
                            break;
                        }
                    }
                }

                if (tableHasNull)
                {
                    _response.IsSuccess = false;
                    _response.Message = "Please upload a valid excel file. Please Download Format file for reference.";
                    return _response;
                }

                dtSETable.TableName = "PartDetails";
                dtSETable.AcceptChanges();

                using (StringWriter sw = new StringWriter())
                {
                    dtSETable.WriteXml(sw);
                    XmlPartDetailsData = sw.ToString();
                }

                objImportPartDetails_Result = db.ImportPartDetails(XmlPartDetailsData, Utilities.GetUserID(ActionContext.Request)).ToList();

                if (objImportPartDetails_Result.Count > 0)
                {
                    #region Generate Excel file for Invalid Data
                    dtInvalidRecords = (DataTable)JsonConvert.DeserializeObject(JsonConvert.SerializeObject(objImportPartDetails_Result), typeof(DataTable));

                    if (dtInvalidRecords.Rows.Count > 0)
                    {
                        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                        ExcelPackage excel = new ExcelPackage();
                        int recordIndex;
                        ExcelWorksheet WorkSheet1 = excel.Workbook.Worksheets.Add("Invalid_PartDetails_Records");
                        WorkSheet1.TabColor = System.Drawing.Color.Black;
                        WorkSheet1.DefaultRowHeight = 12;

                        //Header of table
                        WorkSheet1.Row(1).Height = 20;
                        WorkSheet1.Row(1).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        WorkSheet1.Row(1).Style.Font.Bold = true;

                        WorkSheet1.Cells[1, 1].Value = "PartNumber";
                        WorkSheet1.Cells[1, 2].Value = "PartName";
                        WorkSheet1.Cells[1, 3].Value = "PartDescription";
                        WorkSheet1.Cells[1, 4].Value = "CTSerialNo";
                        WorkSheet1.Cells[1, 5].Value = "PartStatus";
                        WorkSheet1.Cells[1, 6].Value = "SalePrice";
                        WorkSheet1.Cells[1, 7].Value = "CompanyName";
                        WorkSheet1.Cells[1, 8].Value = "BranchName";
                        WorkSheet1.Cells[1, 9].Value = "ReceiveFrom";
                        WorkSheet1.Cells[1, 10].Value = "ReceiveDate";
                        WorkSheet1.Cells[1, 11].Value = "DocketNo";
                        WorkSheet1.Cells[1, 12].Value = "PurchasePrice";
                        WorkSheet1.Cells[1, 13].Value = "Quantity";
                        WorkSheet1.Cells[1, 14].Value = "HSNCode";
                        WorkSheet1.Cells[1, 15].Value = "IsActive";
                        WorkSheet1.Cells[1, 16].Value = "ValidationMessage";

                        recordIndex = 2;

                        foreach (DataRow dataRow in dtInvalidRecords.Rows)
                        {
                            WorkSheet1.Cells[recordIndex, 1].Value = dataRow["PartNumber"];
                            WorkSheet1.Cells[recordIndex, 2].Value = dataRow["PartName"];
                            WorkSheet1.Cells[recordIndex, 3].Value = dataRow["PartDescription"];
                            WorkSheet1.Cells[recordIndex, 4].Value = dataRow["CTSerialNo"];
                            WorkSheet1.Cells[recordIndex, 5].Value = dataRow["PartStatus"];
                            WorkSheet1.Cells[recordIndex, 6].Value = dataRow["SalePrice"];
                            WorkSheet1.Cells[recordIndex, 7].Value = dataRow["CompanyName"];
                            WorkSheet1.Cells[recordIndex, 8].Value = dataRow["BranchName"];
                            WorkSheet1.Cells[recordIndex, 9].Value = dataRow["ReceiveFrom"];
                            WorkSheet1.Cells[recordIndex, 10].Value = dataRow["ReceiveDate"];
                            WorkSheet1.Cells[recordIndex, 11].Value = dataRow["DocketNo"];
                            WorkSheet1.Cells[recordIndex, 12].Value = dataRow["PurchasePrice"];
                            WorkSheet1.Cells[recordIndex, 13].Value = dataRow["Quantity"];
                            WorkSheet1.Cells[recordIndex, 14].Value = dataRow["HSNCode"];
                            WorkSheet1.Cells[recordIndex, 15].Value = dataRow["IsActive"];
                            WorkSheet1.Cells[recordIndex, 16].Value = dataRow["ValidationMessage"];

                            recordIndex += 1;
                        }

                        WorkSheet1.Column(1).AutoFit();
                        WorkSheet1.Column(2).AutoFit();
                        WorkSheet1.Column(3).AutoFit();
                        WorkSheet1.Column(4).AutoFit();
                        WorkSheet1.Column(5).AutoFit();
                        WorkSheet1.Column(6).AutoFit();
                        WorkSheet1.Column(7).AutoFit();
                        WorkSheet1.Column(8).AutoFit();
                        WorkSheet1.Column(9).AutoFit();
                        WorkSheet1.Column(10).AutoFit();
                        WorkSheet1.Column(11).AutoFit();
                        WorkSheet1.Column(12).AutoFit();
                        WorkSheet1.Column(13).AutoFit();
                        WorkSheet1.Column(14).AutoFit();
                        WorkSheet1.Column(15).AutoFit();
                        WorkSheet1.Column(16).AutoFit();

                        using (MemoryStream memoryStream = new MemoryStream())
                        {
                            excel.SaveAs(memoryStream);
                            memoryStream.Position = 0;
                            objInvalidFileResponseModel = new InvalidFileResponseModel()
                            {
                                FileMemoryStream = memoryStream.ToArray(),
                                FileName = "InvalidPartDetails" + DateTime.Now.ToString("yyyyMMddHHmmss").Replace(" ", "_") + ".xlsx",
                                //FileUniqueId = uniqueFileId
                            };
                        }

                        _response.IsSuccess = false;
                        _response.Message = "Validation failed for some or all records, please check downloaded file with name starts from InvalidPartDetails...";
                        _response.Data = objInvalidFileResponseModel;

                        return _response;
                    }
                    #endregion
                }
                else
                {
                    _response.Message = "Part Details records has been imported successfully.";
                    _response.IsSuccess = true;
                }
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }
    }
}
