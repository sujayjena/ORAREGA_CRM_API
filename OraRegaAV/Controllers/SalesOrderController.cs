using DocumentFormat.OpenXml.Office2010.Excel;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using OraRegaAV.Controllers.API;
using OraRegaAV.DBEntity;
using OraRegaAV.Helpers;
using OraRegaAV.Models;
using OraRegaAV.Models.Constants;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace OraRegaAV.Controllers
{
    public class SalesOrderController : ApiCustomBaseController
    {
        private readonly dbOraRegaEntities db = new dbOraRegaEntities();
        private Response _response = new Response();

        public SalesOrderController()
        {
            _response.IsSuccess = true;
        }

        public async Task<Response> SaveSalesOrderDetails(tblSalesOrder parameters)
        {
            tblSalesOrder tbl;
            //tblSOCustomerComment tblComment;
            tblSalesOrderProduct tblSOProd;
            List<tblSalesOrderProduct> prodToBeDelete = new List<tblSalesOrderProduct>();
            List<int> foundsopID = new List<int>();
            int loggedInUserId;

            try
            {
                loggedInUserId = Utilities.GetUserID(ActionContext.Request);
                tbl = await db.tblSalesOrders.Where(x => x.Id == parameters.Id).FirstOrDefaultAsync();

                //Save or Update Sales Order Details
                if (tbl == null)
                {
                    tbl = new tblSalesOrder();

                    tbl.SalesOrderNumber = Utilities.SalesOrderNumberAutoGenerated();
                    tbl.TicketLogDate = DateTime.Now;

                    tbl.CompanyId = parameters.CompanyId;
                    tbl.BranchId = parameters.BranchId;
                    tbl.CustomerId = parameters.CustomerId;

                    tbl.AlternateNumber = parameters.AlternateNumber;
                    tbl.GstNumber = parameters.GstNumber;

                    tbl.CustomerAddressId = parameters.CustomerAddressId;
                    tbl.PaymentTermId = parameters.PaymentTermId;
                    tbl.IssueDescId = parameters.IssueDescId;
                    tbl.SalesOrderStatusId = parameters.SalesOrderStatusId;
                    tbl.Remark = parameters.Remark;
                    tbl.CustomerComment = parameters.CustomerComment;

                    tbl.CreatedBy = loggedInUserId;
                    tbl.CreatedDate = DateTime.Now;

                    db.tblSalesOrders.Add(tbl);

                    await db.SaveChangesAsync();

                    _response.Message = "Sales Order created successfully";
                    _response.Data = new { SalesOrderNumber = tbl.SalesOrderNumber, TicketLogDate = tbl.TicketLogDate };
                }
                else
                {
                    tbl.CompanyId = parameters.CompanyId;
                    tbl.BranchId = parameters.BranchId;
                    tbl.CustomerId = parameters.CustomerId;

                    tbl.AlternateNumber = parameters.AlternateNumber;
                    tbl.GstNumber = parameters.GstNumber;

                    tbl.CustomerAddressId = parameters.CustomerAddressId;
                    tbl.PaymentTermId = parameters.PaymentTermId;
                    tbl.IssueDescId = parameters.IssueDescId;
                    tbl.SalesOrderStatusId = parameters.SalesOrderStatusId;
                    tbl.Remark = parameters.Remark;
                    tbl.CustomerComment = parameters.CustomerComment;

                    tbl.ModifiedBy = loggedInUserId;
                    tbl.ModifiedDate = DateTime.Now;

                    _response.Message = "Sales Order updated successfully";
                }

                //Save or Update Comments
                //await db.tblSOCustomerComments.Where(c => c.SalesOrderId == tbl.Id).ForEachAsync(c =>
                //{
                //    c.IsDeleted = true;
                //});

                //foreach (string comment in parameters.CustomerComments)
                //{
                //    if (!string.IsNullOrEmpty(comment))
                //    {
                //        tblComment = new tblSOCustomerComment();
                //        tblComment.SalesOrderId = tbl.Id;
                //        tblComment.CustomerComment = comment;
                //        tblComment.IsDeleted = false;
                //        tblComment.CreatedBy = loggedInUserId;
                //        tblComment.CreatedDate = DateTime.Now;
                //        db.tblSOCustomerComments.Add(tblComment);
                //    }
                //}

                //Save or Update Product Details
                foreach (tblSalesOrderProduct prod in parameters.SalesOrderProducts)
                {
                    tblSOProd = prod.Id == 0 ? null : await db.tblSalesOrderProducts
                        .Where(record => record.SalesOrderId == tbl.Id && record.Id == prod.Id)
                        .FirstOrDefaultAsync();

                    if (tblSOProd == null)
                    {
                        tblSOProd = new tblSalesOrderProduct();
                        tblSOProd.SalesOrderId = tbl.Id;
                        tblSOProd.ProductTypeId = prod.ProductTypeId;
                        tblSOProd.ProductMakeId = prod.ProductMakeId;
                        tblSOProd.ProductModelId = prod.ProductModelId;
                        tblSOProd.ProductModelIfOther = prod.ProductModelIfOther;
                        tblSOProd.ProdDescriptionId = prod.ProdDescriptionId;
                        tblSOProd.ProductDescriptionIfOther = prod.ProductDescriptionIfOther;
                        tblSOProd.ProductConditionId = prod.ProductConditionId;
                        tblSOProd.ProductSerialNo = prod.ProductSerialNo;
                        tblSOProd.Quantity = prod.Quantity;
                        tblSOProd.Price = prod.Price;
                        tblSOProd.Comment = prod.Comment;
                        tblSOProd.IsDeleted = false;
                        tblSOProd.CreatedBy = loggedInUserId;
                        tblSOProd.CreatedDate = DateTime.Now;

                        db.tblSalesOrderProducts.Add(tblSOProd);
                    }
                    else
                    {
                        tblSOProd.ProductTypeId = prod.ProductTypeId;
                        tblSOProd.ProductMakeId = prod.ProductMakeId;
                        tblSOProd.ProductModelId = prod.ProductModelId;
                        tblSOProd.ProductModelIfOther = prod.ProductModelIfOther;
                        tblSOProd.ProdDescriptionId = prod.ProdDescriptionId;
                        tblSOProd.ProductDescriptionIfOther = prod.ProductDescriptionIfOther;
                        tblSOProd.ProductConditionId = prod.ProductConditionId;
                        tblSOProd.ProductSerialNo = prod.ProductSerialNo;
                        tblSOProd.Quantity = prod.Quantity;
                        tblSOProd.Price = prod.Price;
                        tblSOProd.Comment = prod.Comment;
                    }

                    await db.SaveChangesAsync();
                    foundsopID.Add(tblSOProd.Id);
                }

                //To delete removed products
                if (parameters.SalesOrderProducts.Count > 0)
                {
                    prodToBeDelete = await db.tblSalesOrderProducts.Where(record => record.SalesOrderId == tbl.Id
                        && !foundsopID.Contains(record.Id)).ToListAsync();
                }
                else
                {
                    prodToBeDelete = await db.tblSalesOrderProducts.Where(record => record.SalesOrderId == tbl.Id).ToListAsync();
                }

                foreach (tblSalesOrderProduct p in prodToBeDelete)
                {
                    await db.tblSalesOrderProducts.Where(prod => prod.Id == p.Id)
                        .ForEachAsync(temp =>
                        {
                            temp.IsDeleted = true;
                        });
                }

                await db.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        public async Task<Response> RetrieveSalesOrdersList(SalesOrderListParameters parameters)
        {
            List<GetSalesOrdersList_Result> lstResult;
            int loggedInUserId = 0;

            try
            {
                //loggedInUserId = Utilities.GetUserID(ActionContext.Request);
                var vTotal = new ObjectParameter("Total", typeof(int));

                await Task.Run(() =>
                {
                    lstResult = db.GetSalesOrdersList(parameters.CompanyId.SanitizeValue(),parameters.BranchId.SanitizeValue(),parameters.SalesOrderStatusId.SanitizeValue(), parameters.SearchValue, parameters.PageSize, parameters.PageNo, vTotal, loggedInUserId).ToList();

                    _response.TotalCount = Convert.ToInt32(vTotal.Value);
                    _response.Data = lstResult;
                });
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        public async Task<Response> RetrieveSalesOrderDetails(string salesOrderNo)
        {
            SalesOrderDetailsResult result;

            try
            {
                result = new SalesOrderDetailsResult();
                result.SODetails = new GetSalesOrderDetails_Result();
                //result.CommentsList = new List<GetSOCustomerCommentsList_Result>();
                result.ProductsList = new List<GetSalesOrderProductsList_Result>();

                await Task.Run(() =>
                {
                    result.SODetails = db.GetSalesOrderDetails(salesOrderNo).FirstOrDefault();

                    if (result.SODetails != null)
                    {
                        //result.CommentsList = db.GetSOCustomerCommentsList(result.SODetails.Id).ToList();
                        result.ProductsList = db.GetSalesOrderProductsList(result.SODetails.Id).ToList();
                    }
                });

                _response.Data = result;
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ValidationConstant.InternalServerError;
                LogWriter.WriteLog(ex);
            }

            return _response;
        }

        [HttpPost]
        [Route("api/SalesOrder/DownloadSalesOrderList")]
        public Response DownloadSalesOrderList(SalesOrderListParameters parameters)
        {
            string uniqueFileId = Guid.NewGuid().ToString().Replace("-", "");
            InvalidFileResponseModel objInvalidFileResponseModel = null;
            try
            {
                var userId = 0;

                var vTotal = new ObjectParameter("Total", typeof(int));
                var listObj = db.GetSalesOrdersList(parameters.CompanyId.SanitizeValue(), parameters.BranchId.SanitizeValue(), parameters.SalesOrderStatusId.SanitizeValue(), parameters.SearchValue, parameters.PageSize, parameters.PageNo, vTotal, userId).ToList();

                if (listObj.Count == 0)
                {
                    _response.IsSuccess = false;
                    _response.Message = "No records found.";
                    return _response;
                }
                else
                {
                    #region Generate Excel file for Department

                    DataTable export_dt = (DataTable)JsonConvert.DeserializeObject(JsonConvert.SerializeObject(listObj), (typeof(DataTable)));

                    if (export_dt.Rows.Count > 0)
                    {
                        ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;
                        ExcelPackage excel = new ExcelPackage();
                        int recordIndex;
                        int srNo = 0;
                        ExcelWorksheet WorkSheet1 = excel.Workbook.Worksheets.Add("Sales_Order_Creation_List");
                        WorkSheet1.TabColor = System.Drawing.Color.Black;
                        WorkSheet1.DefaultRowHeight = 12;

                        //Header of table
                        WorkSheet1.Row(1).Height = 20;
                        WorkSheet1.Row(1).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        WorkSheet1.Row(1).Style.Font.Bold = true;

                        WorkSheet1.Cells[1, 1].Value = "Sr.No";
                        WorkSheet1.Cells[1, 2].Value = "Sales Order No.";
                        WorkSheet1.Cells[1, 3].Value = "Customer Name";
                        WorkSheet1.Cells[1, 4].Value = "Mobile No.";
                        WorkSheet1.Cells[1, 5].Value = "Email";
                        WorkSheet1.Cells[1, 6].Value = "Product Type";
                        WorkSheet1.Cells[1, 7].Value = "Branch";

                        recordIndex = 2;
                        foreach (DataRow dataRow in export_dt.Rows)
                        {
                            srNo++;
                            WorkSheet1.Cells[recordIndex, 1].Value = srNo;
                            WorkSheet1.Cells[recordIndex, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            WorkSheet1.Cells[recordIndex, 2].Value = dataRow["SalesOrderNumber"];
                            WorkSheet1.Cells[recordIndex, 3].Value = dataRow["FirstName"] + " " + dataRow["LastName"];
                            WorkSheet1.Cells[recordIndex, 4].Value = dataRow["Mobile"];
                            WorkSheet1.Cells[recordIndex, 5].Value = dataRow["Email"];
                            WorkSheet1.Cells[recordIndex, 6].Value = "";
                            WorkSheet1.Cells[recordIndex, 7].Value = dataRow["BranchName"];

                            recordIndex += 1;
                        }

                        WorkSheet1.Column(1).AutoFit();
                        WorkSheet1.Column(2).AutoFit();
                        WorkSheet1.Column(3).AutoFit();
                        WorkSheet1.Column(4).AutoFit();
                        WorkSheet1.Column(5).AutoFit();
                        WorkSheet1.Column(6).AutoFit();
                        WorkSheet1.Column(7).AutoFit();

                        using (MemoryStream memoryStream = new MemoryStream())
                        {
                            excel.SaveAs(memoryStream);
                            memoryStream.Position = 0;
                            objInvalidFileResponseModel = new InvalidFileResponseModel()
                            {
                                FileMemoryStream = memoryStream.ToArray(),
                                FileName = "Sales_Order_Creation_List_" + DateTime.Now.ToString("yyyyMMddHHmmss").Replace(" ", "_") + ".xlsx",
                                FileUniqueId = uniqueFileId
                            };
                        }

                        return new Response()
                        {
                            IsSuccess = true,
                            Message = "Sales Order Creation list Generated Successfully.",
                            Data = objInvalidFileResponseModel
                        };
                    }

                    #endregion
                }
            }
            catch (Exception ex)
            {
                _response.IsSuccess = false;
                _response.Message = ex.Message;
                throw ex;
            }
            return _response;
        }
    }
}